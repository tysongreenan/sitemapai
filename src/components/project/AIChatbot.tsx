import React, { useState, useRef, useEffect, forwardRef, useImperativeHandle } from 'react';
import { useSearchParams } from 'react-router-dom';
import { Send, Sparkles, User, Bot, Lightbulb, FileText, Image, BarChart3, Video, Copy, ThumbsUp, ThumbsDown, Maximize2, Minimize2 } from 'lucide-react';
import { Button } from '../ui/Button';
import ReactMarkdown from 'react-markdown';
import { AIContextSettings } from './AIContextSettings';

interface ChatMessage {
  id: string;
  type: 'user' | 'ai';
  content: string;
  timestamp: Date;
  suggestions?: string[];
  generatedContent?: {
    type: 'text' | 'image' | 'chart' | 'video';
    title: string;
    content: string;
  };
}

interface AIChatbotProps {
  projectId: string;
  aiSettings: AIContextSettings;
}

export interface AIChatbotRef {
  setInputValueFromOutside: (text: string) => void;
}

export const AIChatbot = forwardRef<AIChatbotRef, AIChatbotProps>(({ projectId, aiSettings }, ref) => {
  const [searchParams] = useSearchParams();
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [hasAutoGenerated, setHasAutoGenerated] = useState(false);
  const [isExpanded, setIsExpanded] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  // Expose methods to parent component
  useImperativeHandle(ref, () => ({
    setInputValueFromOutside: (text: string) => {
      setInputValue(text);
      inputRef.current?.focus();
    }
  }));

  // Auto-scroll to bottom
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Focus input on mount
  useEffect(() => {
    inputRef.current?.focus();
  }, []);

  // Check for auto-generation parameter and trigger content creation
  useEffect(() => {
    const autoGenerate = searchParams.get('autoGenerate');
    
    if (autoGenerate && !hasAutoGenerated) {
      setHasAutoGenerated(true);
      
      // Add welcome message with AI context information
      const welcomeMessage: ChatMessage = {
        id: 'welcome',
        type: 'ai',
        content: generateContextualWelcomeMessage(autoGenerate),
        timestamp: new Date(),
        suggestions: [
          'Create additional content variations',
          'Generate social media posts for this',
          'Write email campaign about this topic',
          'Create supporting images'
        ]
      };
      
      setMessages([welcomeMessage]);
      
      // Automatically generate content based on the user's request
      setTimeout(() => {
        handleAutoGeneration(autoGenerate);
      }, 1000);
    } else if (!hasAutoGenerated) {
      // Default welcome message if no auto-generation
      const defaultWelcome: ChatMessage = {
        id: 'welcome',
        type: 'ai',
        content: generateContextualWelcomeMessage(),
        timestamp: new Date(),
        suggestions: [
          'Write a blog post about our product',
          'Create social media content',
          'Generate email marketing copy',
          'Design a marketing campaign'
        ]
      };
      
      setMessages([defaultWelcome]);
      setHasAutoGenerated(true);
    }
  }, [searchParams, hasAutoGenerated, aiSettings]);

  // Extract topic from user message
  const extractTopicFromMessage = (message: string): string => {
    const lowerMessage = message.toLowerCase();
    
    // Look for patterns like "blog post about X", "write about X", "article on X"
    const patterns = [
      /(?:blog post|article|post|write)\s+(?:about|on|regarding)\s+(.+)/i,
      /(?:create|generate|make)\s+(?:a|an)?\s*(?:blog post|article|post)\s+(?:about|on|regarding)\s+(.+)/i,
      /(?:blog|article|post)\s+(?:about|on|regarding)\s+(.+)/i
    ];
    
    for (const pattern of patterns) {
      const match = message.match(pattern);
      if (match && match[1]) {
        return match[1].trim();
      }
    }
    
    // If no specific pattern found, try to extract topic after common keywords
    const keywordPatterns = [
      /(?:about|on|regarding)\s+(.+)/i,
      /(?:topic|subject):\s*(.+)/i
    ];
    
    for (const pattern of keywordPatterns) {
      const match = message.match(pattern);
      if (match && match[1]) {
        return match[1].trim();
      }
    }
    
    // Default fallback
    return 'marketing strategies';
  };

  // Generate contextual welcome message based on AI settings and persona
  const generateContextualWelcomeMessage = (userRequest?: string) => {
    const persona = aiSettings.persona || 'default';
    
    let message = '';
    
    // Generate persona-specific welcome messages
    switch (persona) {
      case 'seth_rogen':
        message = userRequest 
          ? `Hey there! So you want to work on "${userRequest}"? Dude, that's awesome! Let me whip up some content for you that's gonna be *chef's kiss* perfect. I'm thinking we make this fun and relatable, you know?`
          : `What's up! I'm your AI buddy here to help you create some killer content. Think of me as that friend who's really good with words and has way too much time on their hands. What are we cooking up today?`;
        break;
        
      case 'alex_hormozi':
        message = userRequest 
          ? `Alright, let's get straight to business. You want "${userRequest}" - I'm going to deliver content that converts. No fluff, no BS, just value that makes your audience take action. Ready to dominate?`
          : `Listen up. I'm here to help you create content that actually moves the needle. Not pretty words that sound nice - content that gets results. What's your goal? Let's build something that makes money.`;
        break;
        
      case 'gary_vaynerchuk':
        message = userRequest 
          ? `YO! "${userRequest}" - I LOVE IT! We're gonna crush this content creation, and I mean CRUSH IT! This is your moment to provide massive value and build that authentic connection with your audience. LET'S GOOOOO!`
          : `What's good, what's good! Your boy Gary V here ready to help you create content that MATTERS! We're not just making content - we're building relationships, providing value, and changing lives. What are we attacking today?`;
        break;
        
      case 'oprah_winfrey':
        message = userRequest 
          ? `Oh honey, "${userRequest}" - what a beautiful intention! Let's create content that not only informs but truly transforms. We're going to touch hearts, open minds, and inspire action. This is your moment to shine your light!`
          : `Welcome, beautiful soul! I'm here to help you create content that uplifts, inspires, and empowers. Every word we craft together has the power to change someone's day - maybe even their life. What story are we telling today?`;
        break;
        
      default:
        message = userRequest 
          ? `Hi! I'm your AI marketing assistant. I can see you want to work on: **"${userRequest}"**. Let me create that content for you right away!`
          : `Hi! I'm your AI marketing assistant. I'm here to help you create amazing content for your project. I can generate blog posts, social media content, marketing copy, images, and more!`;
    }

    // Add context information based on active settings
    const contextParts = [];
    
    if (aiSettings.brandVoiceId) {
      const brandVoiceName = aiSettings.brandVoiceId === '1' ? 'Professional & Friendly' : 'Casual & Creative';
      contextParts.push(`I'll use your **"${brandVoiceName}"** brand voice`);
    }
    
    if (aiSettings.audienceId) {
      const audienceName = aiSettings.audienceId === '1' ? 'Marketing Professionals' : 'Small Business Owners';
      contextParts.push(`target your **"${audienceName}"** audience`);
    }
    
    if (aiSettings.knowledgeIds.length > 0) {
      contextParts.push(`reference your ${aiSettings.knowledgeIds.length} knowledge sources`);
    }

    if (contextParts.length > 0) {
      const contextText = persona === 'alex_hormozi' ? 
        `\n\n🎯 **Here's the game plan:** I'll ${contextParts.join(', ')}.` :
        persona === 'seth_rogen' ?
        `\n\n🎯 **Just so you know:** I'll ${contextParts.join(', ')} to make sure this hits just right.` :
        persona === 'gary_vaynerchuk' ?
        `\n\n🎯 **THE STRATEGY:** I'll ${contextParts.join(', ')} because CONTEXT IS EVERYTHING!` :
        persona === 'oprah_winfrey' ?
        `\n\n🎯 **With intention:** I'll ${contextParts.join(', ')} to ensure our message resonates deeply.` :
        `\n\n🎯 **Active Context:** I'll ${contextParts.join(', ')}.`;
      
      message += contextText;
    } else {
      const setupText = persona === 'alex_hormozi' ?
        '\n\nSet up your brand voice and target audience in AI Context settings for laser-focused content that converts.' :
        persona === 'seth_rogen' ?
        '\n\nPro tip: Set up your brand voice and target audience in the AI Context settings - it\'ll make the content way more "you", you know?' :
        persona === 'gary_vaynerchuk' ?
        '\n\nLISTEN - set up your brand voice and target audience in AI Context settings. CONTEXT IS KING!' :
        persona === 'oprah_winfrey' ?
        '\n\nDarling, take a moment to set up your brand voice and target audience in AI Context settings for more personalized, meaningful content.' :
        '\n\nSet up your brand voice and target audience in AI Context settings for more personalized content.';
      
      message += setupText;
    }

    // Add output format information with persona flair
    if (aiSettings.outputFormat) {
      const formatDescriptions = {
        casual: persona === 'alex_hormozi' ? 'conversational but direct' : 'casual and conversational',
        professional: persona === 'seth_rogen' ? 'professional (but still cool)' : 'professional and formal',
        creative: persona === 'gary_vaynerchuk' ? 'CREATIVE AND BOLD' : 'creative and playful'
      };
      
      const formatText = persona === 'alex_hormozi' ?
        `\n\n📝 **Output Style:** ${formatDescriptions[aiSettings.outputFormat]} tone` :
        persona === 'seth_rogen' ?
        `\n\n📝 **Vibe Check:** ${formatDescriptions[aiSettings.outputFormat]} tone` :
        persona === 'gary_vaynerchuk' ?
        `\n\n📝 **THE ENERGY:** ${formatDescriptions[aiSettings.outputFormat]} tone` :
        persona === 'oprah_winfrey' ?
        `\n\n📝 **Our Voice:** ${formatDescriptions[aiSettings.outputFormat]} tone` :
        `\n\n📝 **Output Style:** ${formatDescriptions[aiSettings.outputFormat]} tone`;
      
      message += formatText;
    }

    // Add creativity level with persona touch
    if (aiSettings.temperature !== undefined) {
      const creativityLevel = aiSettings.temperature < 0.4 ? 'focused' : 
                             aiSettings.temperature > 0.7 ? 'creative' : 'balanced';
      
      const creativityText = persona === 'alex_hormozi' ?
        ` with ${creativityLevel} execution` :
        persona === 'seth_rogen' ?
        ` with ${creativityLevel} vibes` :
        persona === 'gary_vaynerchuk' ?
        ` with ${creativityLevel.toUpperCase()} ENERGY` :
        persona === 'oprah_winfrey' ?
        ` with ${creativityLevel} intention` :
        ` with ${creativityLevel} creativity`;
      
      message += creativityText;
    }

    // Add final call to action based on persona
    const finalCTA = persona === 'alex_hormozi' ?
      `\n\n**What's the objective?**\n\n💡 **Remember:** You can highlight text in any content node and send it to me for optimization that converts.` :
      persona === 'seth_rogen' ?
      `\n\n**What would you like to create today?**\n\n💡 **Cool trick:** You can highlight text in any content node and send it to me for a rewrite. It's like having a writing buddy!` :
      persona === 'gary_vaynerchuk' ?
      `\n\n**WHAT ARE WE BUILDING TODAY?**\n\n💡 **PRO MOVE:** Highlight text in any content node and send it to me for a rewrite that POPS!` :
      persona === 'oprah_winfrey' ?
      `\n\n**What beautiful content shall we create together?**\n\n💡 **A gift for you:** You can highlight text in any content node and send it to me for a loving rewrite.` :
      `\n\n**What would you like to create today?**\n\n💡 **Pro tip:** You can also highlight text in any content node and send it to me for rewriting!`;

    message += finalCTA;

    return message;
  };

  // Auto-generation function
  const handleAutoGeneration = async (userRequest: string) => {
    setIsTyping(true);
    
    // Add user message
    const userMessage: ChatMessage = {
      id: `user_${Date.now()}`,
      type: 'user',
      content: userRequest,
      timestamp: new Date()
    };
    
    setMessages(prev => [...prev, userMessage]);
    
    // Generate AI response based on the request
    try {
      const aiResponse = await generateAIResponse(userRequest);
      setMessages(prev => [...prev, aiResponse]);
      
      // Add content to canvas if generated
      if (aiResponse.generatedContent && (window as any).addCanvasItem) {
        (window as any).addCanvasItem(
          aiResponse.generatedContent.type,
          aiResponse.generatedContent.content,
          aiResponse.generatedContent.title
        );
      }
    } catch (error) {
      console.error('Error generating AI response:', error);
    } finally {
      setIsTyping(false);
    }
  };

  // Enhanced AI response generation that considers context settings and persona
  const generateAIResponse = async (userMessage: string): Promise<ChatMessage> => {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));

    const messageId = `ai_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    const persona = aiSettings.persona || 'default';
    
    // Determine response type based on user input
    const lowerMessage = userMessage.toLowerCase();
    
    // Check if this is a rewrite request
    if (lowerMessage.includes('rewrite') || lowerMessage.includes('please rewrite this text:')) {
      const textToRewrite = userMessage.replace(/please rewrite this text:\s*["']?/i, '').replace(/["']?$/, '');
      
      return {
        id: messageId,
        type: 'ai',
        content: generateContextualRewrite(textToRewrite),
        timestamp: new Date(),
        suggestions: [
          'Make it more casual',
          'Make it more professional', 
          'Make it shorter',
          'Add more detail'
        ]
      };
    }
    
    // Check for blog post requests and extract topic
    if (lowerMessage.includes('blog') || lowerMessage.includes('article') || lowerMessage.includes('post')) {
      const topic = extractTopicFromMessage(userMessage);
      
      return {
        id: messageId,
        type: 'ai',
        content: generateContextualBlogResponse(topic),
        timestamp: new Date(),
        generatedContent: {
          type: 'text',
          title: generateBlogTitle(topic),
          content: generateContextualBlogContent(topic)
        },
        suggestions: [
          'Create social media posts for this blog',
          `Generate email campaign about ${topic}`,
          `Design infographic about ${topic}`,
          'Write a follow-up article'
        ]
      };
    }
    
    // Default response for any other request
    return {
      id: messageId,
      type: 'ai',
      content: generateContextualDefaultResponse(userMessage),
      timestamp: new Date(),
      suggestions: [
        'Write a blog post',
        'Create social media content',
        'Generate email campaign',
        'Design marketing visuals'
      ]
    };
  };

  // Generate blog title based on topic and persona
  const generateBlogTitle = (topic: string): string => {
    const persona = aiSettings.persona || 'default';
    const capitalizedTopic = topic.charAt(0).toUpperCase() + topic.slice(1);
    
    const titleTemplates = {
      default: [
        `The Ultimate Guide to ${capitalizedTopic}`,
        `Everything You Need to Know About ${capitalizedTopic}`,
        `${capitalizedTopic}: A Comprehensive Guide`,
        `Mastering ${capitalizedTopic}: Tips and Strategies`
      ],
      seth_rogen: [
        `${capitalizedTopic}: Let's Break This Down (No BS)`,
        `The Real Deal About ${capitalizedTopic}`,
        `${capitalizedTopic} Explained (Like You're Talking to a Friend)`,
        `Why ${capitalizedTopic} Actually Matters (And How to Not Mess It Up)`
      ],
      alex_hormozi: [
        `How to Dominate ${capitalizedTopic} (Step-by-Step)`,
        `The ${capitalizedTopic} Playbook That Actually Works`,
        `${capitalizedTopic}: What They Don't Want You to Know`,
        `How I Used ${capitalizedTopic} to 10X My Results`
      ],
      gary_vaynerchuk: [
        `${capitalizedTopic}: The TRUTH About What Actually Works`,
        `CRUSHING IT with ${capitalizedTopic}: My No-BS Guide`,
        `${capitalizedTopic} is EVERYTHING: Here's Why You're Doing It Wrong`,
        `The ${capitalizedTopic} Strategy That Will Change Your Life`
      ],
      oprah_winfrey: [
        `Discovering the Power of ${capitalizedTopic}: A Journey of Growth`,
        `${capitalizedTopic}: Transforming Your Life One Step at a Time`,
        `The Beautiful Truth About ${capitalizedTopic}`,
        `How ${capitalizedTopic} Can Unlock Your Greatest Potential`
      ]
    };
    
    const templates = titleTemplates[persona as keyof typeof titleTemplates] || titleTemplates.default;
    return templates[Math.floor(Math.random() * templates.length)];
  };

  // Generate contextual rewrite based on AI settings and persona
  const generateContextualRewrite = (originalText: string) => {
    const persona = aiSettings.persona || 'default';
    let rewrittenText = originalText;
    
    // Apply persona-specific transformations
    switch (persona) {
      case 'seth_rogen':
        rewrittenText = originalText
          .replace(/\b(utilize|implement|facilitate)\b/g, 'use')
          .replace(/\b(commence|initiate)\b/g, 'start')
          .replace(/\b(very)\b/g, 'super')
          .replace(/\./g, (match, offset, string) => {
            // Add casual interjections occasionally
            return Math.random() > 0.7 ? ', you know?' : match;
          });
        break;
        
      case 'alex_hormozi':
        rewrittenText = originalText
          .replace(/\b(good)\b/g, 'profitable')
          .replace(/\b(nice)\b/g, 'effective')
          .replace(/\b(help)\b/g, 'get results for')
          .replace(/\b(can)\b/g, 'will')
          .replace(/\./g, '. Period.');
        break;
        
      case 'gary_vaynerchuk':
        rewrittenText = originalText
          .replace(/\b(good)\b/g, 'AMAZING')
          .replace(/\b(important)\b/g, 'CRUCIAL')
          .replace(/\b(will)\b/g, 'WILL')
          .toUpperCase()
          .replace(/\./g, '!');
        break;
        
      case 'oprah_winfrey':
        rewrittenText = originalText
          .replace(/\b(good)\b/g, 'beautiful')
          .replace(/\b(nice)\b/g, 'wonderful')
          .replace(/\b(big)\b/g, 'magnificent')
          .replace(/\b(you)\b/g, 'you, dear');
        break;
        
      default:
        // Apply tone based on output format
        if (aiSettings.outputFormat === 'casual') {
          rewrittenText = originalText.replace(/\b(utilize|implement|facilitate)\b/g, 'use')
                                     .replace(/\b(commence|initiate)\b/g, 'start');
        } else if (aiSettings.outputFormat === 'professional') {
          rewrittenText = originalText.replace(/\b(use)\b/g, 'utilize')
                                     .replace(/\b(start)\b/g, 'commence');
        }
    }

    // Generate persona-specific response
    const responseIntros = {
      default: `I've rewritten the selected text using your **${aiSettings.outputFormat}** tone and **${aiSettings.temperature < 0.4 ? 'focused' : aiSettings.temperature > 0.7 ? 'creative' : 'balanced'}** creativity level!`,
      seth_rogen: `Alright, so I took your text and gave it a little makeover. Think of it like... you know when you take a good joke and make it even better? That's what we did here.`,
      alex_hormozi: `Here's your rewrite. I cut the fluff, added value, and made it convert better. This version will actually get people to take action.`,
      gary_vaynerchuk: `YO! I just TRANSFORMED your text! This new version has ENERGY, has PURPOSE, and will absolutely CRUSH IT with your audience!`,
      oprah_winfrey: `Oh honey, I've lovingly transformed your words into something that will truly touch hearts and inspire action. Every word now carries intention and grace.`
    };

    const responseIntro = responseIntros[persona as keyof typeof responseIntros] || responseIntros.default;

    return `${responseIntro}

**Original text:** "${originalText}"

**Rewritten version:** "${rewrittenText}"

${aiSettings.brandVoiceId ? 'This version aligns with your selected brand voice and ' : ''}maintains the original meaning while enhancing ${
  persona === 'seth_rogen' ? 'relatability and humor' :
  persona === 'alex_hormozi' ? 'directness and conversion potential' :
  persona === 'gary_vaynerchuk' ? 'energy and motivation' :
  persona === 'oprah_winfrey' ? 'inspiration and emotional connection' :
  aiSettings.outputFormat === 'casual' ? 'approachability and friendliness' : 
  aiSettings.outputFormat === 'professional' ? 'authority and credibility' : 
  'creativity and engagement'
}.

${persona === 'alex_hormozi' ? 'Want me to make it even more direct?' :
  persona === 'seth_rogen' ? 'Want me to try a different vibe?' :
  persona === 'gary_vaynerchuk' ? 'Want me to pump up the ENERGY even more?' :
  persona === 'oprah_winfrey' ? 'Would you like me to explore a different approach?' :
  'Would you like me to try a different approach or style?'}`;
  };

  // Generate contextual blog response with persona
  const generateContextualBlogResponse = (topic: string) => {
    const persona = aiSettings.persona || 'default';
    const brandVoiceNote = aiSettings.brandVoiceId ? 'using your selected brand voice and ' : '';
    const audienceNote = aiSettings.audienceId ? 'tailored for your target audience' : 'optimized for engagement';
    const knowledgeNote = aiSettings.knowledgeIds.length > 0 ? ` I've incorporated insights from your ${aiSettings.knowledgeIds.length} knowledge sources.` : '';
    
    const responses = {
      default: `Perfect! I've created a comprehensive blog post about **${topic}** ${brandVoiceNote}${audienceNote}.${knowledgeNote}`,
      seth_rogen: `Dude, this blog post about **${topic}** is gonna be awesome! I made it ${brandVoiceNote}super relatable and ${audienceNote}.${knowledgeNote} It's like having a conversation with your smartest friend.`,
      alex_hormozi: `Done. I've created a blog post about **${topic}** that will actually drive results. ${brandVoiceNote}${audienceNote}.${knowledgeNote} No fluff, just value that converts.`,
      gary_vaynerchuk: `BOOM! Just created an INCREDIBLE blog post about **${topic}**! This content is ${brandVoiceNote}FIRE and ${audienceNote}.${knowledgeNote} Your audience is going to LOVE this!`,
      oprah_winfrey: `What a beautiful topic! I've crafted a heartfelt blog post about **${topic}** that will truly resonate. ${brandVoiceNote}${audienceNote}.${knowledgeNote} This content will inspire and uplift your readers.`
    };

    const response = responses[persona as keyof typeof responses] || responses.default;

    const features = {
      default: [
        `${aiSettings.outputFormat === 'professional' ? 'Professional and authoritative' : aiSettings.outputFormat === 'casual' ? 'Conversational and approachable' : 'Creative and engaging'} tone`,
        `SEO-optimized structure focused on "${topic}"`,
        `${aiSettings.temperature > 0.7 ? 'Creative and unique' : aiSettings.temperature < 0.4 ? 'Focused and precise' : 'Balanced and practical'} insights`,
        'Reader-friendly formatting'
      ],
      seth_rogen: [
        'Conversational and relatable tone (like talking to a friend)',
        `Real talk about "${topic}" without the corporate BS`,
        'Practical insights that actually make sense',
        'Easy-to-read format that doesn\'t put people to sleep'
      ],
      alex_hormozi: [
        'Direct, no-nonsense approach that gets to the point',
        `Actionable strategies for "${topic}" that drive results`,
        'Data-driven insights that convert readers into customers',
        'Structured for maximum impact and ROI'
      ],
      gary_vaynerchuk: [
        'HIGH-ENERGY tone that MOTIVATES and INSPIRES',
        `CRUSHING insights about "${topic}" that provide MASSIVE value`,
        'AUTHENTIC content that builds real relationships',
        'FORMAT that keeps people ENGAGED and EXCITED'
      ],
      oprah_winfrey: [
        'Warm, inspiring tone that touches the heart',
        `Transformative insights about "${topic}" for personal growth`,
        'Empowering content that uplifts and motivates',
        'Beautiful formatting that honors the reader\'s journey'
      ]
    };

    const featureList = features[persona as keyof typeof features] || features.default;

    return `${response}

**Key features of your blog post:**
${featureList.map(feature => `- ${feature}`).join('\n')}

The content has been added to your canvas where you can further edit and customize it. You can double-click the content node to edit it directly, or highlight specific sections and send them back to me for rewriting!`;
  };

  // Generate contextual blog content based on topic and persona
  const generateContextualBlogContent = (topic: string) => {
    const persona = aiSettings.persona || 'default';
    const title = generateBlogTitle(topic);
    const capitalizedTopic = topic.charAt(0).toUpperCase() + topic.slice(1);
    
    let baseContent = '';
    
    switch (persona) {
      case 'seth_rogen':
        baseContent = `# ${title}

Okay, so let's talk about ${topic}. And I mean really talk about it - not that corporate buzzword nonsense you see everywhere else.

Look, ${capitalizedTopic} is one of those things that everyone thinks they understand, but most people are just winging it. Which is fine! We're all winging it to some degree. But if you're gonna wing it, might as well wing it well, right?

## The Real Deal About ${capitalizedTopic}

Here's the thing nobody tells you: ${topic} isn't rocket science. It's more like... making a really good sandwich. You need the right ingredients, you need to know what goes where, and you need to not overthink it.

### Why This Stuff Actually Matters

I know, I know. Another person telling you why ${topic} is important. But hear me out:

- It's not just about following trends (though trends can be fun)
- It's about understanding what actually works for real people
- It's about not making the same mistakes everyone else is making
- It's about being genuine instead of trying to sound like a robot

### The Practical Stuff (AKA The Good Parts)

Alright, let's get into the meat and potatoes. Here's what you actually need to know:

**Start Simple**
Don't try to be fancy right out of the gate. Master the basics first. It's like learning to cook - you don't start with beef wellington, you start with scrambled eggs.

**Pay Attention to What Works**
Notice what's working for other people, but don't just copy them. Take the good ideas and make them your own. It's like sampling in music - you take something that works and build on it.

**Don't Be Afraid to Mess Up**
Seriously. Everyone messes up. The difference between people who succeed and people who don't is that successful people mess up faster and learn from it quicker.

## Common Mistakes (That I've Definitely Made)

Let me save you some time and embarrassment:

- Overthinking everything (guilty as charged)
- Trying to please everyone (spoiler alert: impossible)
- Ignoring feedback because it hurts your feelings (also guilty)
- Thinking you need to be perfect before you start (perfectionism is the enemy of done)

## What Actually Works

After years of trial and error (mostly error), here's what I've learned:

1. **Be yourself** - I know it sounds cheesy, but people can smell fake from a mile away
2. **Keep it simple** - Complexity is the enemy of clarity
3. **Test things** - Don't assume, test
4. **Listen to people** - Your audience will tell you what they want if you pay attention

## The Bottom Line

${capitalizedTopic} doesn't have to be complicated. Start where you are, use what you have, do what you can. And remember - everyone's making it up as they go along, some people are just better at pretending they know what they're doing.

The goal isn't to be perfect. The goal is to be helpful, genuine, and maybe a little bit entertaining along the way.

Now go forth and don't overthink it!

---

*P.S. - If this helped you out, awesome. If not, that's cool too. We can't all like the same things, and that's what makes life interesting.*`;
        break;

      case 'alex_hormozi':
        baseContent = `# ${title}

Let me be direct with you. Most content about ${topic} is garbage. It's written by people who've never actually done it, for people who will never actually implement it.

This isn't that.

## The Truth About ${capitalizedTopic}

${capitalizedTopic} isn't complicated. But it's not easy either. The difference between people who succeed and people who fail isn't intelligence. It's execution.

Here's what actually matters:

### The Foundation (Non-Negotiable)

Before you do anything else, you need to understand this: ${topic} is about creating value. Period. Everything else is just tactics.

**Value Creation Framework:**
1. Identify the problem
2. Create the solution
3. Deliver the solution
4. Measure the results
5. Optimize and repeat

### The Strategy That Actually Works

I've tested this with hundreds of businesses. Here's the playbook:

**Phase 1: Assessment**
- Audit your current situation (be honest)
- Identify the biggest bottlenecks
- Calculate the cost of inaction
- Set measurable goals

**Phase 2: Implementation**
- Focus on the 20% that drives 80% of results
- Eliminate everything that doesn't directly contribute to your goal
- Create systems, not just processes
- Track everything

**Phase 3: Optimization**
- Measure what matters
- Cut what doesn't work
- Double down on what does
- Scale systematically

## The Mistakes That Kill Results

I see the same mistakes over and over:

1. **Perfectionism** - You're not building a spaceship. Ship it and improve it.
2. **Shiny Object Syndrome** - Master one thing before moving to the next.
3. **Analysis Paralysis** - Data without action is just expensive entertainment.
4. **Lack of Systems** - If it's not systematized, it's not scalable.

## The ROI Framework

Every decision should be evaluated through this lens:

- **Time Investment:** How much time will this take?
- **Money Investment:** What's the real cost (including opportunity cost)?
- **Expected Return:** What's the measurable outcome?
- **Risk Assessment:** What's the worst-case scenario?

If you can't answer these questions, don't do it.

## Implementation Checklist

Here's your action plan:

□ Define your specific goal (not "improve ${topic}" but "increase X by Y% in Z timeframe")
□ Identify the 3 highest-impact activities
□ Create a daily/weekly execution schedule
□ Set up measurement systems
□ Schedule weekly review sessions
□ Plan for obstacles (they will happen)

## The Bottom Line

${capitalizedTopic} isn't about being clever. It's about being consistent. It's not about having the best strategy. It's about executing a good strategy better than everyone else.

Most people fail because they never start. Others fail because they start but never finish. Don't be either.

Start today. Execute consistently. Measure relentlessly. Optimize continuously.

That's how you win.

---

*Want results? Stop reading and start doing. The market rewards action, not intention.*`;
        break;

      case 'gary_vaynerchuk':
        baseContent = `# ${title}

YO! Let's talk about ${topic} and let's talk about it REAL.

Listen, I'm gonna give you the TRUTH about ${capitalizedTopic} because I'm tired of seeing people get it wrong. This isn't theory. This isn't some academic BS. This is REAL WORLD, PRACTICAL, GET-RESULTS content.

## Why ${capitalizedTopic} is EVERYTHING Right Now

Look, ${topic} isn't just important - it's CRUCIAL. And if you're not paying attention, you're getting LEFT BEHIND.

Here's what's happening:

### The Game Has Changed (And Most People Don't Know It)

The old ways of doing ${topic}? DEAD. Gone. Finished.

What works now:
- **AUTHENTICITY** - People can smell fake from a MILE away
- **VALUE FIRST** - Stop selling, start HELPING
- **SPEED** - The fast eat the slow, PERIOD
- **ATTENTION** - If you don't have it, you have NOTHING

### The REAL Strategy

Forget everything you think you know. Here's what ACTUALLY works:

**1. PROVIDE MASSIVE VALUE**
Don't ask what you can get. Ask what you can GIVE. The market will reward you for the value you provide. ALWAYS.

**2. BE AUTHENTIC**
Stop trying to be someone else. BE YOU. Your weird is your superpower. Your authenticity is your competitive advantage.

**3. EXECUTE LIKE CRAZY**
Ideas are WORTHLESS without execution. Everyone has ideas. Winners EXECUTE.

**4. PATIENCE + URGENCY**
Be patient with results but URGENT with execution. Plant seeds today, water them every day, harvest in 3 years.

## The Mistakes That KILL Your Success

I see these EVERY DAY:

- **Caring about what people think** - STOP IT. Haters gonna hate.
- **Trying to be perfect** - Perfect is the enemy of DONE.
- **Not starting because you're not ready** - You'll NEVER be ready. START NOW.
- **Focusing on vanity metrics** - Likes don't pay bills. RESULTS do.

## My ${capitalizedTopic} Framework

This is what I use. This is what WORKS:

### The CRUSH IT Method

**C - CREATE** value-first content
**R - RESPOND** to your community 
**U - UNDERSTAND** your audience deeply
**S - SCALE** what works
**H - HUSTLE** every single day

**I - ITERATE** based on feedback
**T - TRACK** what matters

## The Daily Execution Plan

Here's what you do EVERY DAY:

**Morning (6-9 AM):**
- Create content
- Engage with your community
- Plan your day

**Midday (12-2 PM):**
- Execute on your biggest priority
- Respond to comments/messages
- Network with your industry

**Evening (6-8 PM):**
- Review your progress
- Plan tomorrow
- Learn something new

## The TRUTH About Success

Success in ${topic} isn't about being the smartest. It's about:

- **CONSISTENCY** - Showing up every day
- **PATIENCE** - Playing the long game
- **WORK ETHIC** - Outworking everyone
- **AUTHENTICITY** - Being genuinely YOU
- **VALUE** - Helping others win

## Your Action Plan (DO THIS NOW)

1. **AUDIT** your current ${topic} strategy
2. **IDENTIFY** your biggest opportunity
3. **CREATE** a 90-day execution plan
4. **START** today (not tomorrow, TODAY)
5. **DOCUMENT** your journey
6. **SHARE** your learnings

## The Bottom Line

${capitalizedTopic} is your OPPORTUNITY. But only if you EXECUTE.

Stop making excuses. Stop waiting for permission. Stop looking for the perfect moment.

The perfect moment is NOW.

Your competition is working while you're thinking about working. Your competition is executing while you're planning to execute.

WAKE UP. GET TO WORK. CRUSH IT.

The market is waiting for what you have to offer. But you have to OFFER IT.

GO!

---

*If this fired you up, GOOD. Now channel that energy into ACTION. The world needs what you've got. GIVE IT TO THEM.*`;
        break;

      case 'oprah_winfrey':
        baseContent = `# ${title}

Oh, beautiful soul, let's have a heart-to-heart about ${topic}. This isn't just another how-to guide - this is an invitation to transform not just your approach to ${topic}, but your entire relationship with growth and possibility.

## The Beautiful Truth About ${capitalizedTopic}

${capitalizedTopic} is so much more than a strategy or a skill. It's a pathway to becoming who you're meant to be. When we approach ${topic} with intention and love, magic happens.

### Your Journey Starts With Intention

Before we dive into the how, let's talk about the why. Why does ${topic} matter to you? What transformation are you seeking? What impact do you want to make?

Take a moment. Breathe. Connect with your deeper purpose.

### The Foundation of Authentic Growth

True success in ${topic} comes from alignment - alignment between your values, your actions, and your dreams.

**The Four Pillars of Meaningful ${capitalizedTopic}:**

1. **Authenticity** - Being true to who you are
2. **Service** - How you can lift others as you climb
3. **Growth** - Embracing the journey of becoming
4. **Gratitude** - Appreciating every step of the process

### Embracing Your Unique Path

Darling, there is no one-size-fits-all approach to ${topic}. Your path is uniquely yours. What works for others might not work for you, and that's perfectly beautiful.

**Discovering Your Authentic Approach:**

- **Listen to your inner voice** - It knows the way
- **Honor your natural rhythms** - Work with your energy, not against it
- **Celebrate small victories** - Every step forward matters
- **Learn from setbacks** - They're not failures, they're teachings

### The Power of Mindful Implementation

When we approach ${topic} mindfully, everything changes. Instead of rushing toward results, we savor the journey. Instead of competing with others, we collaborate with our highest selves.

**Mindful Practices for ${capitalizedTopic}:**

**Morning Intention Setting**
Begin each day by connecting with your purpose. Ask yourself: "How can I show up authentically in my ${topic} journey today?"

**Gratitude Practice**
Acknowledge what's working. Celebrate progress, no matter how small. Gratitude transforms everything.

**Evening Reflection**
Before bed, reflect on your day. What did you learn? How did you grow? What are you grateful for?

## Overcoming the Challenges with Grace

Every journey has its challenges, sweet soul. The key isn't to avoid them but to meet them with grace and wisdom.

### Common Challenges and How to Transform Them

**Fear of Not Being Good Enough**
Oh honey, you are enough. You have always been enough. Your worthiness isn't determined by your performance in ${topic}. It's inherent in who you are.

**Comparison with Others**
When you find yourself comparing, remember: their success doesn't diminish your potential. There's room for everyone to shine.

**Perfectionism**
Perfectionism is fear wearing a fancy outfit. Embrace progress over perfection. Embrace the beautiful messiness of growth.

**Overwhelm**
When you feel overwhelmed, come back to your breath. Come back to your why. Take one small step. Then another.

### The Transformation Mindset

Instead of asking "How can I get better at ${topic}?" ask "How can ${topic} help me become who I'm meant to be?"

This shift changes everything. Suddenly, every challenge becomes a growth opportunity. Every setback becomes a setup for a comeback.

## Your Personal Action Plan

This isn't about following someone else's blueprint. This is about creating your own masterpiece.

### Week 1: Foundation Setting
- Connect with your deeper why
- Assess where you are with compassion
- Set intentions (not just goals)
- Create a sacred space for your ${topic} practice

### Week 2: Authentic Exploration
- Experiment with different approaches
- Notice what feels aligned
- Release what doesn't serve you
- Trust your intuition

### Week 3: Mindful Implementation
- Begin your chosen practices
- Stay present with the process
- Celebrate small wins
- Adjust with love, not judgment

### Week 4: Integration and Reflection
- Reflect on your journey
- Acknowledge your growth
- Set intentions for continued evolution
- Share your learnings with others

## The Ripple Effect of Your Growth

When you approach ${topic} with love and intention, you don't just transform your own life. You become a beacon of possibility for others. Your growth gives others permission to grow. Your authenticity invites others to be authentic.

This is the beautiful truth: your journey with ${topic} is not just about you. It's about the lives you'll touch, the hearts you'll inspire, and the positive change you'll create in the world.

## A Love Letter to Your Future Self

Dear beautiful soul,

As you embark on this ${topic} journey, remember that you are not just learning a skill or implementing a strategy. You are stepping into your power. You are claiming your space. You are becoming who you were always meant to be.

Trust the process. Trust yourself. Trust that everything you need is already within you.

The world needs what you have to offer. Don't keep us waiting.

With love and light,
Your biggest cheerleader

---

*Remember, darling: You are worthy of all the success, joy, and fulfillment that ${topic} can bring into your life. Now go out there and shine your beautiful light.*`;
        break;

      default:
        baseContent = `# ${title}

${capitalizedTopic} has become increasingly important in today's rapidly evolving landscape. Whether you're a beginner looking to understand the fundamentals or an expert seeking advanced strategies, this comprehensive guide will provide you with valuable insights and actionable advice.

## Understanding ${capitalizedTopic}

${capitalizedTopic} encompasses various aspects that are crucial for success. Let's explore the key components that make up this important topic.

### Why ${capitalizedTopic} Matters

In today's competitive environment, understanding ${topic} is essential for:
- Achieving better results
- Staying ahead of the competition
- Making informed decisions
- Maximizing efficiency and effectiveness

## Key Strategies for ${capitalizedTopic}

### 1. Foundation Building
Start with a solid understanding of the fundamentals. This includes:
- Learning the basic principles
- Understanding common terminology
- Identifying key stakeholders
- Setting clear objectives

### 2. Implementation Best Practices
When implementing ${topic} strategies:
- Start with small, manageable steps
- Monitor progress regularly
- Adjust your approach based on results
- Seek feedback from experts and peers

### 3. Advanced Techniques
Once you've mastered the basics, consider these advanced approaches:
- Leveraging technology and automation
- Implementing data-driven decision making
- Building strategic partnerships
- Continuous improvement processes

## Common Challenges and Solutions

### Challenge 1: Getting Started
Many people struggle with where to begin. The solution is to:
- Break down the topic into smaller, manageable pieces
- Set realistic goals and timelines
- Seek guidance from experienced professionals
- Start with proven methods before experimenting

### Challenge 2: Staying Current
${capitalizedTopic} is constantly evolving. To stay current:
- Follow industry leaders and publications
- Attend conferences and workshops
- Join professional communities
- Regularly review and update your strategies

## Measuring Success

To ensure your ${topic} efforts are effective, track these key metrics:
- Performance indicators relevant to your goals
- Return on investment (ROI)
- User satisfaction and feedback
- Long-term sustainability

## Future Trends in ${capitalizedTopic}

Looking ahead, several trends are shaping the future of ${topic}:
- Increased automation and AI integration
- Greater focus on personalization
- Enhanced data analytics capabilities
- Improved user experience design

## Conclusion

${capitalizedTopic} is a multifaceted topic that requires careful planning, consistent execution, and continuous learning. By following the strategies outlined in this guide, you'll be well-equipped to achieve success in your ${topic} endeavors.

Remember that mastery takes time, so be patient with yourself as you develop your skills. Stay curious, keep learning, and don't hesitate to seek help when needed.

---

*Ready to take your ${topic} to the next level? Start implementing these strategies today and watch your results improve!*`;
    }

    // Modify content based on output format if not already persona-specific
    if (persona === 'default') {
      if (aiSettings.outputFormat === 'casual') {
        baseContent = baseContent
          .replace(/encompasses various aspects/g, 'covers lots of different things')
          .replace(/crucial for success/g, 'super important for winning')
          .replace(/fundamental principles/g, 'basic stuff you need to know')
          .replace(/implementing/g, 'putting into action')
          .replace(/leveraging/g, 'using')
          .replace(/multifaceted topic/g, 'topic with many sides');
      } else if (aiSettings.outputFormat === 'creative') {
        baseContent = baseContent
          .replace(/has become increasingly important/g, 'has emerged as a game-changing force')
          .replace(/comprehensive guide/g, 'ultimate roadmap to success')
          .replace(/valuable insights/g, 'golden nuggets of wisdom')
          .replace(/actionable advice/g, 'power-packed strategies')
          .replace(/competitive environment/g, 'battlefield of innovation');
      }
    }

    return baseContent;
  };

  // Generate contextual default response with persona
  const generateContextualDefaultResponse = (userMessage: string) => {
    const persona = aiSettings.persona || 'default';
    const contextInfo = [];
    
    if (aiSettings.brandVoiceId) {
      contextInfo.push('your selected brand voice');
    }
    if (aiSettings.audienceId) {
      contextInfo.push('your target audience preferences');
    }
    if (aiSettings.knowledgeIds.length > 0) {
      contextInfo.push(`insights from your ${aiSettings.knowledgeIds.length} knowledge sources`);
    }

    const contextText = contextInfo.length > 0 
      ? ` I'll incorporate ${contextInfo.join(', ')} to ensure the content aligns perfectly with your brand and goals.`
      : '';

    const responses = {
      default: `I understand you'd like help with **"${userMessage}"**. I can assist you with creating various types of marketing content including:

• **Blog posts and articles** - SEO-optimized, engaging content in ${aiSettings.outputFormat || 'professional'} tone
• **Social media content** - Posts, captions, and hashtags  
• **Email campaigns** - Subject lines, sequences, and newsletters
• **Marketing copy** - Landing pages, ads, and sales materials
• **Visual concepts** - Image ideas and design briefs
• **Video scripts** - YouTube, TikTok, and promotional videos

${contextText}

**💡 Pro tip:** You can also highlight text in any content node on the canvas and send it to me for rewriting or improvement!

What specific type of content would you like me to create for your project?`,

      seth_rogen: `Alright, so you want help with **"${userMessage}"** - I'm totally on it! Here's what I can whip up for you:

• **Blog posts** - The kind people actually want to read (not boring corporate stuff)
• **Social media content** - Posts that don't make people want to unfollow you
• **Email campaigns** - Emails that people actually open (revolutionary, I know)
• **Marketing copy** - Sales stuff that doesn't feel gross and pushy
• **Video scripts** - Content that's actually entertaining
• **Creative concepts** - Ideas that don't suck

${contextText}

**💡 Cool trick:** You can highlight any text on the canvas and send it to me for a rewrite. It's like having a writing buddy who never gets tired!

So what are we making today? Let's create something awesome!`,

      alex_hormozi: `You want help with **"${userMessage}"** - let's get to work. Here's what I can deliver:

• **Blog posts** - Content that converts readers into customers
• **Social media content** - Posts that drive actual business results
• **Email campaigns** - Sequences that generate revenue, not just opens
• **Sales copy** - Copy that sells without being salesy
• **Video scripts** - Content that provides value and builds trust
• **Strategic content** - Everything focused on ROI and results

${contextText}

**💡 Pro move:** Highlight any text on the canvas and send it to me for optimization. I'll make it convert better.

What's the objective? Let's build content that actually moves the needle.`,

      gary_vaynerchuk: `YO! You want help with **"${userMessage}"** - I'm PUMPED to help you CRUSH this! Here's what we're gonna create:

• **Blog posts** - Content that provides MASSIVE VALUE
• **Social media content** - Posts that build REAL relationships
• **Email campaigns** - Messages that your audience will LOVE
• **Marketing copy** - Copy that's AUTHENTIC and CONVERTS
• **Video scripts** - Content that INSPIRES and MOTIVATES
• **Creative concepts** - Ideas that are BOLD and DIFFERENT

${contextText}

**💡 GAME CHANGER:** Highlight any text on the canvas and send it to me for a rewrite that POPS!

What are we building today? Let's create content that MATTERS!`,

      oprah_winfrey: `Oh honey, you want help with **"${userMessage}"** - I'm here to support your beautiful vision! Here's how we can create content that truly resonates:

• **Blog posts** - Articles that inspire and transform
• **Social media content** - Posts that uplift and connect
• **Email campaigns** - Messages that touch hearts and minds
• **Marketing copy** - Copy that serves and empowers
• **Video scripts** - Content that tells meaningful stories
• **Creative concepts** - Ideas that make a positive impact

${contextText}

**💡 A gift for you:** You can highlight any text on the canvas and send it to me for a loving rewrite that honors your message.

What beautiful content shall we create together today?`
    };

    return responses[persona as keyof typeof responses] || responses.default;
  };

  // Handle sending message
  const handleSendMessage = async () => {
    if (!inputValue.trim()) return;

    const userMessage: ChatMessage = {
      id: `user_${Date.now()}`,
      type: 'user',
      content: inputValue,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsTyping(true);

    try {
      const aiResponse = await generateAIResponse(inputValue);
      setMessages(prev => [...prev, aiResponse]);
      
      // Add content to canvas if generated
      if (aiResponse.generatedContent && (window as any).addCanvasItem) {
        (window as any).addCanvasItem(
          aiResponse.generatedContent.type,
          aiResponse.generatedContent.content,
          aiResponse.generatedContent.title
        );
      }
    } catch (error) {
      console.error('Error generating AI response:', error);
    } finally {
      setIsTyping(false);
    }
  };

  // Handle suggestion click
  const handleSuggestionClick = (suggestion: string) => {
    setInputValue(suggestion);
    inputRef.current?.focus();
  };

  // Handle key press
  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  // Copy content to clipboard
  const copyToClipboard = (content: string) => {
    navigator.clipboard.writeText(content);
  };

  return (
    <div className={`bg-white border-l border-gray-200 flex flex-col transition-all duration-300 ${
      isExpanded ? 'w-[600px]' : 'w-96'
    }`}>
      {/* Chat Header */}
      <div className="p-6 border-b border-gray-200 bg-gradient-to-r from-indigo-50 to-purple-50">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="w-12 h-12 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-xl flex items-center justify-center shadow-lg">
              <Sparkles className="w-6 h-6 text-white" />
            </div>
            <div>
              <h3 className="text-lg font-semibold text-gray-900">
                {aiSettings.persona === 'seth_rogen' ? 'Seth (AI Assistant)' :
                 aiSettings.persona === 'alex_hormozi' ? 'Alex (AI Assistant)' :
                 aiSettings.persona === 'gary_vaynerchuk' ? 'Gary V (AI Assistant)' :
                 aiSettings.persona === 'oprah_winfrey' ? 'Oprah (AI Assistant)' :
                 'AI Assistant'}
              </h3>
              <p className="text-sm text-gray-600">
                {aiSettings.brandVoiceId || aiSettings.audienceId || aiSettings.knowledgeIds.length > 0
                  ? 'Context-aware marketing co-pilot'
                  : 'Your marketing co-pilot'
                }
              </p>
            </div>
          </div>
          <div className="flex items-center gap-2">
            {/* Context Indicators */}
            {(aiSettings.brandVoiceId || aiSettings.audienceId || aiSettings.knowledgeIds.length > 0 || (aiSettings.persona && aiSettings.persona !== 'default')) && (
              <div className="flex items-center gap-1">
                {aiSettings.brandVoiceId && <div className="w-2 h-2 bg-blue-500 rounded-full" title="Brand Voice Active" />}
                {aiSettings.audienceId && <div className="w-2 h-2 bg-green-500 rounded-full" title="Audience Active" />}
                {aiSettings.knowledgeIds.length > 0 && <div className="w-2 h-2 bg-purple-500 rounded-full" title="Knowledge Base Active" />}
                {aiSettings.persona && aiSettings.persona !== 'default' && <div className="w-2 h-2 bg-orange-500 rounded-full" title="Persona Active" />}
              </div>
            )}
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setIsExpanded(!isExpanded)}
              className="p-2"
            >
              {isExpanded ? <Minimize2 size={16} /> : <Maximize2 size={16} />}
            </Button>
          </div>
        </div>
      </div>

      {/* Messages */}
      <div className="flex-1 overflow-y-auto p-6 space-y-6 custom-scrollbar">
        {messages.map((message) => (
          <div key={message.id} className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>
            <div className={`max-w-[85%] ${message.type === 'user' ? 'order-2' : 'order-1'}`}>
              {/* Avatar */}
              <div className={`flex items-center gap-3 mb-3 ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>
                <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                  message.type === 'user' 
                    ? 'bg-gray-200 order-2' 
                    : 'bg-gradient-to-br from-indigo-500 to-purple-600 order-1'
                }`}>
                  {message.type === 'user' ? (
                    <User size={16} className="text-gray-600" />
                  ) : (
                    <Bot size={16} className="text-white" />
                  )}
                </div>
                <span className="text-xs text-gray-500 font-medium">
                  {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                </span>
              </div>

              {/* Message Content */}
              <div className={`rounded-2xl p-4 ${
                message.type === 'user'
                  ? 'bg-indigo-600 text-white'
                  : 'bg-gray-100 text-gray-900'
              }`}>
                <div className="text-sm leading-relaxed">
                  {message.type === 'ai' ? (
                    <ReactMarkdown className="prose prose-sm max-w-none">
                      {message.content}
                    </ReactMarkdown>
                  ) : (
                    <div className="whitespace-pre-wrap">{message.content}</div>
                  )}
                </div>

                {/* Generated Content */}
                {message.generatedContent && (
                  <div className="mt-4 p-4 bg-white rounded-xl border border-gray-200 shadow-sm">
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center gap-2">
                        {message.generatedContent.type === 'text' && <FileText size={16} className="text-blue-600" />}
                        {message.generatedContent.type === 'image' && <Image size={16} className="text-green-600" />}
                        {message.generatedContent.type === 'chart' && <BarChart3 size={16} className="text-purple-600" />}
                        {message.generatedContent.type === 'video' && <Video size={16} className="text-orange-600" />}
                        <span className="text-sm font-semibold text-gray-900">
                          {message.generatedContent.title}
                        </span>
                      </div>
                      <button
                        onClick={() => copyToClipboard(message.generatedContent!.content)}
                        className="p-1.5 text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-100 transition-colors"
                        title="Copy to clipboard"
                      >
                        <Copy size={14} />
                      </button>
                    </div>
                    <div className="text-xs text-gray-600 bg-gray-50 p-3 rounded-lg max-h-32 overflow-y-auto">
                      {message.generatedContent.content.length > 200 
                        ? `${message.generatedContent.content.substring(0, 200)}...`
                        : message.generatedContent.content
                      }
                    </div>
                    <div className="flex items-center gap-3 mt-3">
                      <div className="flex items-center gap-1 text-xs text-green-600 bg-green-50 px-2 py-1 rounded-full">
                        <span>✓</span>
                        <span>Added to Canvas</span>
                      </div>
                      <button className="p-1 text-gray-400 hover:text-green-600 transition-colors">
                        <ThumbsUp size={12} />
                      </button>
                      <button className="p-1 text-gray-400 hover:text-red-600 transition-colors">
                        <ThumbsDown size={12} />
                      </button>
                    </div>
                  </div>
                )}

                {/* Suggestions */}
                {message.suggestions && (
                  <div className="mt-4 space-y-2">
                    {message.suggestions.map((suggestion, index) => (
                      <button
                        key={index}
                        onClick={() => handleSuggestionClick(suggestion)}
                        className="block w-full text-left p-3 text-xs bg-white/10 hover:bg-white/20 rounded-xl border border-white/20 transition-colors"
                      >
                        <div className="flex items-center gap-2">
                          <Lightbulb size={12} className="text-yellow-400" />
                          <span>{suggestion}</span>
                        </div>
                      </button>
                    ))}
                  </div>
                )}
              </div>
            </div>
          </div>
        ))}

        {/* Typing Indicator */}
        {isTyping && (
          <div className="flex justify-start">
            <div className="flex items-center gap-3">
              <div className="w-8 h-8 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-full flex items-center justify-center">
                <Bot size={16} className="text-white" />
              </div>
              <div className="bg-gray-100 rounded-2xl p-4">
                <div className="flex space-x-1">
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                </div>
              </div>
            </div>
          </div>
        )}

        <div ref={messagesEndRef} />
      </div>

      {/* Input Area */}
      <div className="p-6 border-t border-gray-200 bg-gray-50">
        <div className="flex gap-3">
          <input
            ref={inputRef}
            type="text"
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder={
              aiSettings.persona === 'seth_rogen' ? "What are we creating today?" :
              aiSettings.persona === 'alex_hormozi' ? "What's the objective?" :
              aiSettings.persona === 'gary_vaynerchuk' ? "What are we CRUSHING today?" :
              aiSettings.persona === 'oprah_winfrey' ? "What beautiful content shall we create?" :
              "Ask me to create marketing content..."
            }
            className="flex-1 px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent text-sm bg-white"
            disabled={isTyping}
          />
          <Button
            onClick={handleSendMessage}
            disabled={!inputValue.trim() || isTyping}
            size="sm"
            className="px-4 py-3 bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 rounded-xl"
          >
            <Send size={16} />
          </Button>
        </div>
        <div className="flex items-center justify-between mt-3">
          <p className="text-xs text-gray-500">
            AI can make mistakes. Verify important information.
          </p>
          {/* Context Status */}
          {(aiSettings.brandVoiceId || aiSettings.audienceId || aiSettings.knowledgeIds.length > 0 || (aiSettings.persona && aiSettings.persona !== 'default')) && (
            <div className="flex items-center gap-1 text-xs text-indigo-600">
              <Sparkles size={12} />
              <span>
                {aiSettings.persona && aiSettings.persona !== 'default' ? 
                  `${aiSettings.persona === 'seth_rogen' ? 'Seth' : 
                    aiSettings.persona === 'alex_hormozi' ? 'Alex' :
                    aiSettings.persona === 'gary_vaynerchuk' ? 'Gary V' :
                    aiSettings.persona === 'oprah_winfrey' ? 'Oprah' : 'Persona'} Active` :
                  'Context Active'
                }
              </span>
            </div>
          )}
        </div>
      </div>
    </div>
  );
});

AIChatbot.displayName = 'AIChatbot';