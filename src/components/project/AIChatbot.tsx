import React, { useState, useRef, useEffect, forwardRef, useImperativeHandle } from 'react';
import { useSearchParams } from 'react-router-dom';
import { Send, Sparkles, User, Bot, Lightbulb, FileText, Image, BarChart3, Video, Copy, ThumbsUp, ThumbsDown, Maximize2, Minimize2 } from 'lucide-react';
import { Button } from '../ui/Button';
import ReactMarkdown from 'react-markdown';

interface ChatMessage {
  id: string;
  type: 'user' | 'ai';
  content: string;
  timestamp: Date;
  suggestions?: string[];
  generatedContent?: {
    type: 'text' | 'image' | 'chart' | 'video';
    title: string;
    content: string;
  };
}

interface AIChatbotProps {
  projectId: string;
  brandVoice?: string;
  audience?: string;
}

export interface AIChatbotRef {
  setInputValueFromOutside: (text: string) => void;
}

export const AIChatbot = forwardRef<AIChatbotRef, AIChatbotProps>(({ projectId, brandVoice, audience }, ref) => {
  const [searchParams] = useSearchParams();
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [hasAutoGenerated, setHasAutoGenerated] = useState(false);
  const [isExpanded, setIsExpanded] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  // Expose methods to parent component
  useImperativeHandle(ref, () => ({
    setInputValueFromOutside: (text: string) => {
      setInputValue(text);
      inputRef.current?.focus();
    }
  }));

  // Auto-scroll to bottom
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Focus input on mount
  useEffect(() => {
    inputRef.current?.focus();
  }, []);

  // Check for auto-generation parameter and trigger content creation
  useEffect(() => {
    const autoGenerate = searchParams.get('autoGenerate');
    
    if (autoGenerate && !hasAutoGenerated) {
      setHasAutoGenerated(true);
      
      // Add welcome message
      const welcomeMessage: ChatMessage = {
        id: 'welcome',
        type: 'ai',
        content: `Hi! I'm your AI marketing assistant. I can see you want to work on: **"${autoGenerate}"**. Let me create that content for you right away!`,
        timestamp: new Date(),
        suggestions: [
          'Create additional content variations',
          'Generate social media posts for this',
          'Write email campaign about this topic',
          'Create supporting images'
        ]
      };
      
      setMessages([welcomeMessage]);
      
      // Automatically generate content based on the user's request
      setTimeout(() => {
        handleAutoGeneration(autoGenerate);
      }, 1000);
    } else if (!hasAutoGenerated) {
      // Default welcome message if no auto-generation
      const defaultWelcome: ChatMessage = {
        id: 'welcome',
        type: 'ai',
        content: `Hi! I'm your AI marketing assistant. I'm here to help you create amazing content for your project. I can generate blog posts, social media content, marketing copy, images, and more!

${brandVoice ? `I'll use your **"${brandVoice}"** brand voice` : 'Set up your brand voice in Jasper IQ for personalized content'} ${audience ? `and target your **"${audience}"** audience.` : 'and define your target audience for better results.'}

**What would you like to create today?**

ðŸ’¡ **Pro tip:** You can also highlight text in any content node and send it to me for rewriting!`,
        timestamp: new Date(),
        suggestions: [
          'Write a blog post about our product',
          'Create social media content',
          'Generate email marketing copy',
          'Design a marketing campaign'
        ]
      };
      
      setMessages([defaultWelcome]);
      setHasAutoGenerated(true);
    }
  }, [searchParams, hasAutoGenerated, brandVoice, audience]);

  // Auto-generation function
  const handleAutoGeneration = async (userRequest: string) => {
    setIsTyping(true);
    
    // Add user message
    const userMessage: ChatMessage = {
      id: `user_${Date.now()}`,
      type: 'user',
      content: userRequest,
      timestamp: new Date()
    };
    
    setMessages(prev => [...prev, userMessage]);
    
    // Generate AI response based on the request
    try {
      const aiResponse = await generateAIResponse(userRequest);
      setMessages(prev => [...prev, aiResponse]);
      
      // Add content to canvas if generated
      if (aiResponse.generatedContent && (window as any).addCanvasItem) {
        (window as any).addCanvasItem(
          aiResponse.generatedContent.type,
          aiResponse.generatedContent.content,
          aiResponse.generatedContent.title
        );
      }
    } catch (error) {
      console.error('Error generating AI response:', error);
    } finally {
      setIsTyping(false);
    }
  };

  // Simulate AI response
  const generateAIResponse = async (userMessage: string): Promise<ChatMessage> => {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));

    const messageId = `ai_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    // Determine response type based on user input
    const lowerMessage = userMessage.toLowerCase();
    
    // Check if this is a rewrite request
    if (lowerMessage.includes('rewrite') || lowerMessage.includes('please rewrite this text:')) {
      const textToRewrite = userMessage.replace(/please rewrite this text:\s*["']?/i, '').replace(/["']?$/, '');
      
      return {
        id: messageId,
        type: 'ai',
        content: `I've rewritten the selected text for you! Here's an improved version that maintains the original meaning while enhancing clarity and engagement.

**Original text:** "${textToRewrite}"

**Rewritten version:** "${textToRewrite.split(' ').map(word => 
          word.charAt(0).toUpperCase() + word.slice(1)
        ).join(' ').replace(/\./g, '. ').replace(/,/g, ', ')
        .replace(/\s+/g, ' ').trim()}"

The rewritten version improves readability and flow while preserving your original message. Would you like me to try a different approach or style?`,
        timestamp: new Date(),
        suggestions: [
          'Make it more casual',
          'Make it more professional', 
          'Make it shorter',
          'Add more detail'
        ]
      };
    }
    
    if (lowerMessage.includes('blog') || lowerMessage.includes('article') || lowerMessage.includes('post') || lowerMessage.includes('summer projects')) {
      return {
        id: messageId,
        type: 'ai',
        content: `Perfect! I've created a comprehensive blog post based on your request. This content is optimized for engagement and includes practical insights your audience will love.

**Key features of your blog post:**
- SEO-optimized structure
- Engaging introduction and conclusion
- Practical tips and actionable advice
- Reader-friendly formatting

The content has been added to your canvas where you can further edit and customize it. You can double-click the content node to edit it directly, or highlight specific sections and send them back to me for rewriting!`,
        timestamp: new Date(),
        generatedContent: {
          type: 'text',
          title: 'Creative Summer Project Ideas for an Unforgettable Season',
          content: `# Creative Summer Project Ideas for an Unforgettable Season

Summer is a time for sunny skies, longer days, and plenty of opportunities to explore your creativity. Whether you're looking for a DIY crafts session with your kids, exciting outdoor activities, or ways to give back to your community, there's something for everyone. Here's a list of inspiring and fun summer project ideas to keep individuals, families, and even groups engaged during the warmer months.

## DIY Crafts to Inspire Creativity

Unleashing your inner artist is a great way to spend summer days, and the best part? You don't need to be an expert. These craft ideas are easy, fun, and perfect for all ages.

### 1. Painted Flower Pots
Transform plain terracotta pots into vibrant pieces of art. All you'll need is acrylic paint, brushes, and a bit of imagination. These painted pots are wonderful for growing seasonal flowers or herbs.

### 2. Mason Jar Lanterns
Create magical outdoor lighting with mason jars, battery-operated fairy lights, and decorative elements like twine or lace. Perfect for evening garden parties or cozy backyard gatherings.

### 3. Rock Painting
Collect smooth rocks from your yard or local park and turn them into colorful decorations. Paint inspirational messages, animals, or abstract designs. Hide them around your neighborhood for others to find!

## Outdoor Adventures and Activities

Summer is the perfect time to step outside and embrace nature. These outdoor projects will help you make the most of the beautiful weather.

### 4. Build a Backyard Fort
Using blankets, chairs, and creativity, construct the ultimate outdoor hideaway. Add pillows, books, and snacks for the perfect summer reading nook.

### 5. Start a Container Garden
Even without a large yard, you can grow your own vegetables and herbs in containers. Tomatoes, basil, and lettuce are great options for beginners.

### 6. Create a Nature Scavenger Hunt
Design a list of items to find in your local park or backyard: specific leaves, interesting rocks, or different types of flowers. Great for kids and adults alike!

## Community and Social Projects

Summer is also an excellent time to connect with others and make a positive impact in your community.

### 7. Organize a Neighborhood Clean-Up
Rally your neighbors for a community beautification project. Provide gloves, trash bags, and refreshments for volunteers.

### 8. Host a Skill-Sharing Workshop
Do you have a talent you'd love to share? Organize a workshop to teach others photography, cooking, gardening, or any skill you're passionate about.

### 9. Create Care Packages
Assemble care packages for local homeless shelters or food banks. Include essentials like socks, toiletries, and non-perishable snacks.

## Learning and Personal Development

Use the relaxed pace of summer to pick up new skills or dive deeper into existing interests.

### 10. Start a Summer Reading Challenge
Set a goal to read a certain number of books or explore new genres. Create a reading log to track your progress and discoveries.

### 11. Learn a New Language
Use apps, online courses, or local classes to start learning a language you've always been curious about. Practice with native speakers in your community.

### 12. Document Your Summer Adventures
Start a photo journal, blog, or scrapbook to capture your summer memories. This project will give you something beautiful to look back on.

## Tips for Successful Summer Projects

- **Start small**: Choose projects that match your available time and energy
- **Involve others**: Many projects are more fun with friends or family
- **Be flexible**: Don't be afraid to modify projects based on your interests and resources
- **Document the process**: Take photos and notes to remember your creative journey
- **Celebrate completion**: Acknowledge your accomplishments, no matter how small

## Conclusion

Summer projects are about more than just staying busyâ€”they're opportunities to learn, create, connect, and grow. Whether you choose a simple craft project or an ambitious community initiative, the key is to enjoy the process and embrace the spirit of summer exploration.

What project will you start first? Remember, the best summer project is the one that brings you joy and helps you make the most of this beautiful season.

---

*Ready to start your summer project adventure? Share your creations and inspire others in your community!*`
        },
        suggestions: [
          'Create social media posts for this blog',
          'Generate email campaign about summer projects',
          'Design infographic about summer activities',
          'Write a follow-up article about indoor projects'
        ]
      };
    }
    
    // Default response for any other request
    return {
      id: messageId,
      type: 'ai',
      content: `I understand you'd like help with **"${userMessage}"**. I can assist you with creating various types of marketing content including:

â€¢ **Blog posts and articles** - SEO-optimized, engaging content
â€¢ **Social media content** - Posts, captions, and hashtags  
â€¢ **Email campaigns** - Subject lines, sequences, and newsletters
â€¢ **Marketing copy** - Landing pages, ads, and sales materials
â€¢ **Visual concepts** - Image ideas and design briefs
â€¢ **Video scripts** - YouTube, TikTok, and promotional videos

**ðŸ’¡ Pro tip:** You can also highlight text in any content node on the canvas and send it to me for rewriting or improvement!

What specific type of content would you like me to create for your project?`,
      timestamp: new Date(),
      suggestions: [
        'Write a blog post',
        'Create social media content',
        'Generate email campaign',
        'Design marketing visuals'
      ]
    };
  };

  // Handle sending message
  const handleSendMessage = async () => {
    if (!inputValue.trim()) return;

    const userMessage: ChatMessage = {
      id: `user_${Date.now()}`,
      type: 'user',
      content: inputValue,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsTyping(true);

    try {
      const aiResponse = await generateAIResponse(inputValue);
      setMessages(prev => [...prev, aiResponse]);
      
      // Add content to canvas if generated
      if (aiResponse.generatedContent && (window as any).addCanvasItem) {
        (window as any).addCanvasItem(
          aiResponse.generatedContent.type,
          aiResponse.generatedContent.content,
          aiResponse.generatedContent.title
        );
      }
    } catch (error) {
      console.error('Error generating AI response:', error);
    } finally {
      setIsTyping(false);
    }
  };

  // Handle suggestion click
  const handleSuggestionClick = (suggestion: string) => {
    setInputValue(suggestion);
    inputRef.current?.focus();
  };

  // Handle key press
  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  // Copy content to clipboard
  const copyToClipboard = (content: string) => {
    navigator.clipboard.writeText(content);
  };

  return (
    <div className={`bg-white border-l border-gray-200 flex flex-col transition-all duration-300 ${
      isExpanded ? 'w-[600px]' : 'w-96'
    }`}>
      {/* Chat Header */}
      <div className="p-6 border-b border-gray-200 bg-gradient-to-r from-indigo-50 to-purple-50">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="w-12 h-12 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-xl flex items-center justify-center shadow-lg">
              <Sparkles className="w-6 h-6 text-white" />
            </div>
            <div>
              <h3 className="text-lg font-semibold text-gray-900">AI Assistant</h3>
              <p className="text-sm text-gray-600">Your marketing co-pilot</p>
            </div>
          </div>
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setIsExpanded(!isExpanded)}
            className="p-2"
          >
            {isExpanded ? <Minimize2 size={16} /> : <Maximize2 size={16} />}
          </Button>
        </div>
      </div>

      {/* Messages */}
      <div className="flex-1 overflow-y-auto p-6 space-y-6 custom-scrollbar">
        {messages.map((message) => (
          <div key={message.id} className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>
            <div className={`max-w-[85%] ${message.type === 'user' ? 'order-2' : 'order-1'}`}>
              {/* Avatar */}
              <div className={`flex items-center gap-3 mb-3 ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>
                <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                  message.type === 'user' 
                    ? 'bg-gray-200 order-2' 
                    : 'bg-gradient-to-br from-indigo-500 to-purple-600 order-1'
                }`}>
                  {message.type === 'user' ? (
                    <User size={16} className="text-gray-600" />
                  ) : (
                    <Bot size={16} className="text-white" />
                  )}
                </div>
                <span className="text-xs text-gray-500 font-medium">
                  {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                </span>
              </div>

              {/* Message Content */}
              <div className={`rounded-2xl p-4 ${
                message.type === 'user'
                  ? 'bg-indigo-600 text-white'
                  : 'bg-gray-100 text-gray-900'
              }`}>
                <div className="text-sm leading-relaxed">
                  {message.type === 'ai' ? (
                    <ReactMarkdown className="prose prose-sm max-w-none">
                      {message.content}
                    </ReactMarkdown>
                  ) : (
                    <div className="whitespace-pre-wrap">{message.content}</div>
                  )}
                </div>

                {/* Generated Content */}
                {message.generatedContent && (
                  <div className="mt-4 p-4 bg-white rounded-xl border border-gray-200 shadow-sm">
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center gap-2">
                        {message.generatedContent.type === 'text' && <FileText size={16} className="text-blue-600" />}
                        {message.generatedContent.type === 'image' && <Image size={16} className="text-green-600" />}
                        {message.generatedContent.type === 'chart' && <BarChart3 size={16} className="text-purple-600" />}
                        {message.generatedContent.type === 'video' && <Video size={16} className="text-orange-600" />}
                        <span className="text-sm font-semibold text-gray-900">
                          {message.generatedContent.title}
                        </span>
                      </div>
                      <button
                        onClick={() => copyToClipboard(message.generatedContent!.content)}
                        className="p-1.5 text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-100 transition-colors"
                        title="Copy to clipboard"
                      >
                        <Copy size={14} />
                      </button>
                    </div>
                    <div className="text-xs text-gray-600 bg-gray-50 p-3 rounded-lg max-h-32 overflow-y-auto">
                      {message.generatedContent.content.length > 200 
                        ? `${message.generatedContent.content.substring(0, 200)}...`
                        : message.generatedContent.content
                      }
                    </div>
                    <div className="flex items-center gap-3 mt-3">
                      <div className="flex items-center gap-1 text-xs text-green-600 bg-green-50 px-2 py-1 rounded-full">
                        <span>âœ“</span>
                        <span>Added to Canvas</span>
                      </div>
                      <button className="p-1 text-gray-400 hover:text-green-600 transition-colors">
                        <ThumbsUp size={12} />
                      </button>
                      <button className="p-1 text-gray-400 hover:text-red-600 transition-colors">
                        <ThumbsDown size={12} />
                      </button>
                    </div>
                  </div>
                )}

                {/* Suggestions */}
                {message.suggestions && (
                  <div className="mt-4 space-y-2">
                    {message.suggestions.map((suggestion, index) => (
                      <button
                        key={index}
                        onClick={() => handleSuggestionClick(suggestion)}
                        className="block w-full text-left p-3 text-xs bg-white/10 hover:bg-white/20 rounded-xl border border-white/20 transition-colors"
                      >
                        <div className="flex items-center gap-2">
                          <Lightbulb size={12} className="text-yellow-400" />
                          <span>{suggestion}</span>
                        </div>
                      </button>
                    ))}
                  </div>
                )}
              </div>
            </div>
          </div>
        ))}

        {/* Typing Indicator */}
        {isTyping && (
          <div className="flex justify-start">
            <div className="flex items-center gap-3">
              <div className="w-8 h-8 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-full flex items-center justify-center">
                <Bot size={16} className="text-white" />
              </div>
              <div className="bg-gray-100 rounded-2xl p-4">
                <div className="flex space-x-1">
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                </div>
              </div>
            </div>
          </div>
        )}

        <div ref={messagesEndRef} />
      </div>

      {/* Input Area */}
      <div className="p-6 border-t border-gray-200 bg-gray-50">
        <div className="flex gap-3">
          <input
            ref={inputRef}
            type="text"
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder="Ask me to create marketing content..."
            className="flex-1 px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent text-sm bg-white"
            disabled={isTyping}
          />
          <Button
            onClick={handleSendMessage}
            disabled={!inputValue.trim() || isTyping}
            size="sm"
            className="px-4 py-3 bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 rounded-xl"
          >
            <Send size={16} />
          </Button>
        </div>
        <p className="text-xs text-gray-500 mt-3 text-center">
          AI can make mistakes. Verify important information.
        </p>
      </div>
    </div>
  );
});

AIChatbot.displayName = 'AIChatbot';