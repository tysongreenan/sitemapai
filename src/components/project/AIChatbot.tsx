import React, { useState, useRef, useEffect, forwardRef, useImperativeHandle } from 'react';
import { useSearchParams } from 'react-router-dom';
import { Send, Sparkles, User, Bot, Lightbulb, FileText, Image, BarChart3, Video, Copy, ThumbsUp, ThumbsDown, Maximize2, Minimize2 } from 'lucide-react';
import { Button } from '../ui/Button';
import ReactMarkdown from 'react-markdown';
import { AIContextSettings } from './AIContextSettings';
import { OpenAIService } from '../../lib/openai';

interface ChatMessage {
  id: string;
  type: 'user' | 'ai';
  content: string;
  timestamp: Date;
  suggestions?: string[];
}

interface AIChatbotProps {
  projectId: string;
  aiSettings: AIContextSettings;
}

export interface AIChatbotRef {
  setInputValueFromOutside: (text: string) => void;
}

export const AIChatbot = forwardRef<AIChatbotRef, AIChatbotProps>(({ projectId, aiSettings }, ref) => {
  const [searchParams] = useSearchParams();
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [hasAutoGenerated, setHasAutoGenerated] = useState(false);
  const [isExpanded, setIsExpanded] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  // Expose methods to parent component
  useImperativeHandle(ref, () => ({
    setInputValueFromOutside: (text: string) => {
      setInputValue(text);
      inputRef.current?.focus();
    }
  }));

  // Auto-scroll to bottom
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Focus input on mount
  useEffect(() => {
    inputRef.current?.focus();
  }, []);

  // Check for auto-generation parameter and trigger content creation
  useEffect(() => {
    const autoGenerate = searchParams.get('autoGenerate');
    
    if (autoGenerate && !hasAutoGenerated) {
      setHasAutoGenerated(true);
      
      // Add welcome message with AI context information
      const welcomeMessage: ChatMessage = {
        id: 'welcome',
        type: 'ai',
        content: generateContextualWelcomeMessage(autoGenerate),
        timestamp: new Date(),
        suggestions: [
          'Create additional content variations',
          'Generate social media posts for this',
          'Write email campaign about this topic',
          'Create supporting images'
        ]
      };
      
      setMessages([welcomeMessage]);
      
      // Automatically generate content based on the user's request
      setTimeout(() => {
        handleAutoGeneration(autoGenerate);
      }, 1000);
    } else if (!hasAutoGenerated) {
      // Default welcome message if no auto-generation
      const defaultWelcome: ChatMessage = {
        id: 'welcome',
        type: 'ai',
        content: generateContextualWelcomeMessage(),
        timestamp: new Date(),
        suggestions: [
          'Write a blog post about our product',
          'Create social media content',
          'Generate email marketing copy',
          'Design a marketing campaign'
        ]
      };
      
      setMessages([defaultWelcome]);
      setHasAutoGenerated(true);
    }
  }, [searchParams, hasAutoGenerated, aiSettings]);

  // Extract topic from user message
  const extractTopicFromMessage = (message: string): string => {
    const lowerMessage = message.toLowerCase();
    
    // Look for patterns like "blog post about X", "write about X", "article on X"
    const patterns = [
      /(?:blog post|article|post|write)\s+(?:about|on|regarding)\s+(.+)/i,
      /(?:create|generate|make)\s+(?:a|an)?\s*(?:blog post|article|post)\s+(?:about|on|regarding)\s+(.+)/i,
      /(?:blog|article|post)\s+(?:about|on|regarding)\s+(.+)/i
    ];
    
    for (const pattern of patterns) {
      const match = message.match(pattern);
      if (match && match[1]) {
        return match[1].trim();
      }
    }
    
    // If no specific pattern found, try to extract topic after common keywords
    const keywordPatterns = [
      /(?:about|on|regarding)\s+(.+)/i,
      /(?:topic|subject):\s*(.+)/i
    ];
    
    for (const pattern of keywordPatterns) {
      const match = message.match(pattern);
      if (match && match[1]) {
        return match[1].trim();
      }
    }
    
    // Default fallback
    return 'marketing strategies';
  };

  // Generate contextual welcome message based on AI settings
  const generateContextualWelcomeMessage = (userRequest?: string) => {
    let message = userRequest 
      ? `Hi! I'm your AI marketing assistant. I can see you want to work on: **"${userRequest}"**. Let me create that content for you right away!`
      : `Hi! I'm your AI marketing assistant. I'm here to help you create amazing content for your project. I can generate blog posts, social media content, marketing copy, images, and more!`;

    // Add persona-specific greeting
    if (aiSettings.persona && aiSettings.persona !== 'default') {
      switch (aiSettings.persona) {
        case 'seth_rogen':
          message = userRequest 
            ? `Hey there! Seth here. So you wanna work on "${userRequest}"? Dude, that's awesome! Let me whip up some content that's gonna be *chef's kiss* perfect. This is gonna be fun!`
            : `Hey! Seth Rogen here, ready to help you create some killer content! I'm like your creative buddy who happens to know a thing or two about marketing. Let's make some magic happen, eh?`;
          break;
        case 'alex_hormozi':
          message = userRequest 
            ? `Listen up. You want "${userRequest}"? Here's the deal - I'm going to create content that actually converts. No fluff, no BS, just results-driven material that makes you money. Let's get to work.`
            : `Alex Hormozi here. I don't do participation trophies. I create content that sells, converts, and builds real businesses. Tell me what you need and I'll give you the blueprint to dominate your market.`;
          break;
        case 'gary_vaynerchuk':
          message = userRequest 
            ? `YO! Gary V here and I'm PUMPED about "${userRequest}"! This is going to be FIRE! I'm about to create content that's going to absolutely CRUSH it for you. Let's GO GO GO!`
            : `What's up! Gary Vee in the house! I'm here to create content that's going to SMASH your competition! No excuses, no BS - just pure HUSTLE and results. What are we building today?`;
          break;
        case 'oprah_winfrey':
          message = userRequest 
            ? `Hello, beautiful soul! I'm so excited to help you with "${userRequest}". This is going to be a journey of discovery and empowerment. Let's create content that not only informs but truly transforms lives!`
            : `Welcome, dear friend! I'm here to help you create content that doesn't just reach people - it touches their hearts and changes their lives. Together, we'll craft messages that inspire and empower. What's calling to your heart today?`;
          break;
      }
    }

    // Add context information based on active settings
    const contextParts = [];
    
    if (aiSettings.brandVoiceId) {
      // Mock brand voice data - in real app, fetch from API
      const brandVoiceName = aiSettings.brandVoiceId === '1' ? 'Professional & Friendly' : 'Casual & Creative';
      contextParts.push(`I'll use your **"${brandVoiceName}"** brand voice`);
    }
    
    if (aiSettings.audienceId) {
      // Mock audience data - in real app, fetch from API
      const audienceName = aiSettings.audienceId === '1' ? 'Marketing Professionals' : 'Small Business Owners';
      contextParts.push(`target your **"${audienceName}"** audience`);
    }
    
    if (aiSettings.knowledgeIds.length > 0) {
      contextParts.push(`reference your ${aiSettings.knowledgeIds.length} knowledge sources`);
    }

    if (contextParts.length > 0 && aiSettings.persona === 'default') {
      message += `\n\nüéØ **Active Context:** I'll ${contextParts.join(', ')}.`;
    } else if (contextParts.length > 0) {
      // Persona-specific context messages
      switch (aiSettings.persona) {
        case 'seth_rogen':
          message += `\n\nOh, and I've got all your brand stuff loaded up - your voice, audience, the whole nine yards. This is gonna be so dialed in!`;
          break;
        case 'alex_hormozi':
          message += `\n\nI've analyzed your brand voice, audience data, and knowledge base. Everything I create will be laser-focused on your specific market.`;
          break;
        case 'gary_vaynerchuk':
          message += `\n\nI've got ALL your brand intel locked and loaded! Your voice, your audience, your knowledge - we're going to create content that's 100% YOU!`;
          break;
        case 'oprah_winfrey':
          message += `\n\nI've taken the time to understand your beautiful brand voice and the wonderful people you serve. Every word will be crafted with intention and love.`;
          break;
      }
    } else if (aiSettings.persona === 'default') {
      message += '\n\nSet up your brand voice and target audience in AI Context settings for more personalized content.';
    }

    // Add output format information
    if (aiSettings.outputFormat && aiSettings.persona === 'default') {
      const formatDescriptions = {
        casual: 'casual and conversational',
        professional: 'professional and formal',
        creative: 'creative and playful'
      };
      message += `\n\nüìù **Output Style:** ${formatDescriptions[aiSettings.outputFormat]} tone`;
    }

    // Add creativity level
    if (aiSettings.temperature !== undefined && aiSettings.persona === 'default') {
      const creativityLevel = aiSettings.temperature < 0.4 ? 'focused' : 
                             aiSettings.temperature > 0.7 ? 'creative' : 'balanced';
      message += ` with ${creativityLevel} creativity`;
    }

    if (aiSettings.persona === 'default') {
      message += `\n\n**What would you like to create today?**

üí° **Pro tip:** You can also highlight text in any content node and send it to me for rewriting!`;
    }

    return message;
  };

  // Auto-generation function with campaign detection
  const handleAutoGeneration = async (userRequest: string) => {
    setIsTyping(true);
    
    // Add user message
    const userMessage: ChatMessage = {
      id: `user_${Date.now()}`,
      type: 'user',
      content: userRequest,
      timestamp: new Date()
    };
    
    setMessages(prev => [...prev, userMessage]);
    
    // Check if this is a campaign request
    const isCampaign = userRequest.toLowerCase().includes('campaign') || 
                       userRequest.toLowerCase().includes('launch') ||
                       userRequest.toLowerCase().includes('promote');
    
    if (isCampaign) {
      // Generate complete campaign assets
      const campaignAssets = [
        {
          type: 'social_ad',
          title: 'üì± Facebook & Instagram Ads',
          content: 'Eye-catching visuals with compelling copy for social media advertising'
        },
        {
          type: 'text',
          title: 'üìß Email Welcome Series',
          content: 'Day 1: Welcome\nDay 3: Value Proposition\nDay 7: Special Offer'
        },
        {
          type: 'text',
          title: 'üìù Blog Post',
          content: 'In-depth content establishing thought leadership'
        },
        {
          type: 'text',
          title: 'üéØ Landing Page',
          content: 'High-converting landing page with clear CTA'
        },
        {
          type: 'text',
          title: 'üîÑ Follow-up Email',
          content: 'Post-purchase email sequence for customer retention'
        }
      ];

      // Add all campaign assets to canvas with staggered timing
      campaignAssets.forEach((asset, index) => {
        setTimeout(() => {
          if ((window as any).addCanvasItem) {
            (window as any).addCanvasItem(
              asset.type,
              asset.content,
              asset.title
            );
          }
        }, 500 + (index * 300)); // Stagger creation
      });

      // Show success message
      setTimeout(() => {
        const successMessage: ChatMessage = {
          id: `ai_success_${Date.now()}`,
          type: 'ai',
          content: generatePersonaSuccessMessage(),
          timestamp: new Date(),
          suggestions: [
            'Organize into Journey View',
            'Create additional variations',
            'Generate supporting content',
            'Add performance metrics'
          ]
        };
        setMessages(prev => [...prev, successMessage]);
      }, 2000);
      
      setIsTyping(false);
    } else {
      // Generate AI response and add directly to canvas
      try {
        await generateAndAddToCanvas(userRequest);
      } catch (error) {
        console.error('Error generating AI response:', error);
      } finally {
        setIsTyping(false);
      }
    }
  };

  // Generate persona-specific success message
  const generatePersonaSuccessMessage = () => {
    switch (aiSettings.persona) {
      case 'seth_rogen':
        return `üöÄ Boom! Complete campaign created! That was like... *chef's kiss* beautiful, man! Now click that "‚ú® Journey View" button to see how it all flows together. It's gonna look so good!`;
      case 'alex_hormozi':
        return `üöÄ Done. Complete campaign system deployed. Every piece is designed to move prospects through your funnel and convert. Click "‚ú® Journey View" to see the money-making machine we just built.`;
      case 'gary_vaynerchuk':
        return `üöÄ BOOM! We just created a COMPLETE campaign that's going to CRUSH IT! This is FIRE! Hit that "‚ú® Journey View" button and watch your customer journey come to LIFE!`;
      case 'oprah_winfrey':
        return `üöÄ Beautiful! We've created a complete campaign that will touch hearts and transform lives! Click "‚ú® Journey View" to see how each piece works together to create a meaningful customer experience.`;
      default:
        return `üöÄ Complete campaign created! Click "‚ú® Journey View" button to see the flow!`;
    }
  };

  // NEW: Generate content and add directly to canvas without showing in chat
  const generateAndAddToCanvas = async (userMessage: string) => {
    try {
      // Check if this is content that should be generated
      const lowerMessage = userMessage.toLowerCase();
      const isContentRequest = lowerMessage.includes('write') || 
                              lowerMessage.includes('create') || 
                              lowerMessage.includes('generate') ||
                              lowerMessage.includes('landing page') || 
                              lowerMessage.includes('email') || 
                              lowerMessage.includes('social media') ||
                              lowerMessage.includes('blog') ||
                              lowerMessage.includes('copy') ||
                              lowerMessage.includes('content') ||
                              lowerMessage.includes('post') ||
                              lowerMessage.includes('ad');

      if (isContentRequest) {
        // Generate content using OpenAI
        const aiContent = await OpenAIService.generateMarketingContent(userMessage, aiSettings);
        
        // Create a descriptive title based on the request
        let title = `üìù ${userMessage.slice(0, 50)}`;
        if (userMessage.length > 50) title += '...';
        
        // Determine content type based on request
        let contentType: 'text' | 'image' | 'chart' | 'video' = 'text';
        if (lowerMessage.includes('image') || lowerMessage.includes('visual')) {
          contentType = 'image';
        } else if (lowerMessage.includes('chart') || lowerMessage.includes('graph')) {
          contentType = 'chart';
        } else if (lowerMessage.includes('video')) {
          contentType = 'video';
        }

        // Add content directly to canvas
        if ((window as any).addCanvasItem) {
          (window as any).addCanvasItem(contentType, aiContent, title);
        }

        // Show brief confirmation message in chat
        const confirmationMessage: ChatMessage = {
          id: `ai_${Date.now()}`,
          type: 'ai',
          content: generateContentCreatedMessage(title),
          timestamp: new Date(),
          suggestions: [
            'Create a variation',
            'Make it more persuasive',
            'Adapt for different platform',
            'Generate supporting content'
          ]
        };
        
        setMessages(prev => [...prev, confirmationMessage]);
      } else {
        // For non-content requests (questions, conversations), show normal response
        const aiResponse = await OpenAIService.generateMarketingContent(userMessage, aiSettings);
        
        const responseMessage: ChatMessage = {
          id: `ai_${Date.now()}`,
          type: 'ai',
          content: aiResponse,
          timestamp: new Date(),
          suggestions: [
            'Write a blog post',
            'Create social media content',
            'Generate email campaign',
            'Design marketing visuals'
          ]
        };
        
        setMessages(prev => [...prev, responseMessage]);
      }
    } catch (error) {
      console.error('Error generating content:', error);
      
      // Fallback to mock response if OpenAI fails
      const fallbackMessage: ChatMessage = {
        id: `ai_${Date.now()}`,
        type: 'ai',
        content: 'I apologize, but I encountered an error generating content. Please make sure the OpenAI API key is configured and try again.',
        timestamp: new Date(),
        suggestions: ['Try again', 'Check API settings']
      };
      
      setMessages(prev => [...prev, fallbackMessage]);
    }
  };

  // Generate persona-specific content creation confirmation
  const generateContentCreatedMessage = (title: string) => {
    const baseMessage = `‚úÖ **Content created and added to canvas!**\n\n**${title}**`;
    
    switch (aiSettings.persona) {
      case 'seth_rogen':
        return `${baseMessage}\n\nDude, that turned out awesome! Check it out on your canvas - you can edit it, move it around, whatever you need. This is gonna work great for you!`;
      case 'alex_hormozi':
        return `${baseMessage}\n\nDone. Content is live on your canvas and ready to convert. Review it, optimize if needed, then deploy. This will drive results.`;
      case 'gary_vaynerchuk':
        return `${baseMessage}\n\nBOOM! Content is LIVE on your canvas! This is going to absolutely CRUSH IT! Go check it out and let's keep building!`;
      case 'oprah_winfrey':
        return `${baseMessage}\n\nBeautiful! Your content is now ready on the canvas, crafted with intention and purpose. Take a moment to review this gift and see how it can touch lives.`;
      default:
        return `${baseMessage}\n\nYour content has been generated and added to the canvas. You can now edit, customize, or use it as-is in your marketing campaigns.`;
    }
  };

  // Handle sending message
  const handleSendMessage = async () => {
    if (!inputValue.trim()) return;

    const userMessage: ChatMessage = {
      id: `user_${Date.now()}`,
      type: 'user',
      content: inputValue,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    const currentInput = inputValue;
    setInputValue('');
    setIsTyping(true);

    try {
      await generateAndAddToCanvas(currentInput);
    } catch (error) {
      console.error('Error generating AI response:', error);
    } finally {
      setIsTyping(false);
    }
  };

  // Handle suggestion click
  const handleSuggestionClick = (suggestion: string) => {
    setInputValue(suggestion);
    inputRef.current?.focus();
  };

  // Handle key press
  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  // Copy content to clipboard
  const copyToClipboard = (content: string) => {
    navigator.clipboard.writeText(content);
  };

  return (
    <div className={`bg-white border-l border-gray-200 flex flex-col transition-all duration-300 ${
      isExpanded ? 'w-[600px]' : 'w-96'
    }`}>
      {/* Chat Header */}
      <div className="p-6 border-b border-gray-200 bg-gradient-to-r from-indigo-50 to-purple-50">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="w-12 h-12 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-xl flex items-center justify-center shadow-lg">
              <Sparkles className="w-6 h-6 text-white" />
            </div>
            <div>
              <h3 className="text-lg font-semibold text-gray-900">
                {aiSettings.persona && aiSettings.persona !== 'default' 
                  ? aiSettings.persona.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())
                  : 'AI Assistant'
                }
              </h3>
              <p className="text-sm text-gray-600">
                {aiSettings.brandVoiceId || aiSettings.audienceId || aiSettings.knowledgeIds.length > 0
                  ? 'Context-aware marketing co-pilot'
                  : 'Your marketing co-pilot'
                }
              </p>
            </div>
          </div>
          <div className="flex items-center gap-2">
            {/* Context Indicators */}
            {(aiSettings.brandVoiceId || aiSettings.audienceId || aiSettings.knowledgeIds.length > 0 || (aiSettings.persona && aiSettings.persona !== 'default')) && (
              <div className="flex items-center gap-1">
                {aiSettings.brandVoiceId && <div className="w-2 h-2 bg-blue-500 rounded-full" title="Brand Voice Active" />}
                {aiSettings.audienceId && <div className="w-2 h-2 bg-green-500 rounded-full" title="Audience Active" />}
                {aiSettings.knowledgeIds.length > 0 && <div className="w-2 h-2 bg-purple-500 rounded-full" title="Knowledge Base Active" />}
                {aiSettings.persona && aiSettings.persona !== 'default' && <div className="w-2 h-2 bg-orange-500 rounded-full" title="Persona Active" />}
              </div>
            )}
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setIsExpanded(!isExpanded)}
              className="p-2"
            >
              {isExpanded ? <Minimize2 size={16} /> : <Maximize2 size={16} />}
            </Button>
          </div>
        </div>
      </div>

      {/* Messages */}
      <div className="flex-1 overflow-y-auto p-6 space-y-6 custom-scrollbar">
        {messages.map((message) => (
          <div key={message.id} className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>
            <div className={`max-w-[85%] ${message.type === 'user' ? 'order-2' : 'order-1'}`}>
              {/* Avatar */}
              <div className={`flex items-center gap-3 mb-3 ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>
                <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                  message.type === 'user' 
                    ? 'bg-gray-200 order-2' 
                    : 'bg-gradient-to-br from-indigo-500 to-purple-600 order-1'
                }`}>
                  {message.type === 'user' ? (
                    <User size={16} className="text-gray-600" />
                  ) : (
                    <Bot size={16} className="text-white" />
                  )}
                </div>
                <span className="text-xs text-gray-500 font-medium">
                  {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                </span>
              </div>

              {/* Message Content */}
              <div className={`rounded-2xl p-4 ${
                message.type === 'user'
                  ? 'bg-indigo-600 text-white'
                  : 'bg-gray-100 text-gray-900'
              }`}>
                <div className="text-sm leading-relaxed">
                  {message.type === 'ai' ? (
                    <ReactMarkdown className="prose prose-sm max-w-none">
                      {message.content}
                    </ReactMarkdown>
                  ) : (
                    <div className="whitespace-pre-wrap">{message.content}</div>
                  )}
                </div>

                {/* Suggestions */}
                {message.suggestions && (
                  <div className="mt-4 space-y-2">
                    {message.suggestions.map((suggestion, index) => (
                      <button
                        key={index}
                        onClick={() => handleSuggestionClick(suggestion)}
                        className="block w-full text-left p-3 text-xs bg-white/10 hover:bg-white/20 rounded-xl border border-white/20 transition-colors"
                      >
                        <div className="flex items-center gap-2">
                          <Lightbulb size={12} className="text-yellow-400" />
                          <span>{suggestion}</span>
                        </div>
                      </button>
                    ))}
                  </div>
                )}
              </div>
            </div>
          </div>
        ))}

        {/* Typing Indicator */}
        {isTyping && (
          <div className="flex justify-start">
            <div className="flex items-center gap-3">
              <div className="w-8 h-8 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-full flex items-center justify-center">
                <Bot size={16} className="text-white" />
              </div>
              <div className="bg-gray-100 rounded-2xl p-4">
                <div className="flex space-x-1">
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                </div>
              </div>
            </div>
          </div>
        )}

        <div ref={messagesEndRef} />
      </div>

      {/* Input Area */}
      <div className="p-6 border-t border-gray-200 bg-gray-50">
        <div className="flex gap-3">
          <input
            ref={inputRef}
            type="text"
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder="Ask me to create marketing content..."
            className="flex-1 px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent text-sm bg-white"
            disabled={isTyping}
          />
          <Button
            onClick={handleSendMessage}
            disabled={!inputValue.trim() || isTyping}
            size="sm"
            className="px-4 py-3 bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 rounded-xl"
          >
            <Send size={16} />
          </Button>
        </div>
        <div className="flex items-center justify-between mt-3">
          <p className="text-xs text-gray-500">
            {import.meta.env.VITE_OPENAI_API_KEY ? 'Powered by OpenAI GPT' : 'AI can make mistakes. Verify important information.'}
          </p>
          {/* Context Status */}
          {(aiSettings.brandVoiceId || aiSettings.audienceId || aiSettings.knowledgeIds.length > 0 || (aiSettings.persona && aiSettings.persona !== 'default')) && (
            <div className="flex items-center gap-1 text-xs text-indigo-600">
              <Sparkles size={12} />
              <span>Context Active</span>
            </div>
          )}
        </div>
      </div>
    </div>
  );
});

AIChatbot.displayName = 'AIChatbot';