import React, { useState, useRef, useEffect, forwardRef, useImperativeHandle } from 'react';
import { useSearchParams } from 'react-router-dom';
import { Send, Sparkles, User, Bot, Lightbulb, FileText, Image, BarChart3, Video, Copy, ThumbsUp, ThumbsDown, Maximize2, Minimize2 } from 'lucide-react';
import { Button } from '../ui/Button';
import ReactMarkdown from 'react-markdown';
import { AIContextSettings } from './AIContextSettings';

interface ChatMessage {
  id: string;
  type: 'user' | 'ai';
  content: string;
  timestamp: Date;
  suggestions?: string[];
  generatedContent?: {
    type: 'text' | 'image' | 'chart' | 'video';
    title: string;
    content: string;
  };
}

interface AIChatbotProps {
  projectId: string;
  aiSettings: AIContextSettings;
}

export interface AIChatbotRef {
  setInputValueFromOutside: (text: string) => void;
}

export const AIChatbot = forwardRef<AIChatbotRef, AIChatbotProps>(({ projectId, aiSettings }, ref) => {
  const [searchParams] = useSearchParams();
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [hasAutoGenerated, setHasAutoGenerated] = useState(false);
  const [isExpanded, setIsExpanded] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  // Expose methods to parent component
  useImperativeHandle(ref, () => ({
    setInputValueFromOutside: (text: string) => {
      setInputValue(text);
      inputRef.current?.focus();
    }
  }));

  // Auto-scroll to bottom
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Focus input on mount
  useEffect(() => {
    inputRef.current?.focus();
  }, []);

  // Check for auto-generation parameter and trigger content creation
  useEffect(() => {
    const autoGenerate = searchParams.get('autoGenerate');
    
    if (autoGenerate && !hasAutoGenerated) {
      setHasAutoGenerated(true);
      
      // Add welcome message with AI context information
      const welcomeMessage: ChatMessage = {
        id: 'welcome',
        type: 'ai',
        content: generateContextualWelcomeMessage(autoGenerate),
        timestamp: new Date(),
        suggestions: [
          'Create additional content variations',
          'Generate social media posts for this',
          'Write email campaign about this topic',
          'Create supporting images'
        ]
      };
      
      setMessages([welcomeMessage]);
      
      // Automatically generate content based on the user's request
      setTimeout(() => {
        handleAutoGeneration(autoGenerate);
      }, 1000);
    } else if (!hasAutoGenerated) {
      // Default welcome message if no auto-generation
      const defaultWelcome: ChatMessage = {
        id: 'welcome',
        type: 'ai',
        content: generateContextualWelcomeMessage(),
        timestamp: new Date(),
        suggestions: [
          'Write a blog post about our product',
          'Create social media content',
          'Generate email marketing copy',
          'Design a marketing campaign'
        ]
      };
      
      setMessages([defaultWelcome]);
      setHasAutoGenerated(true);
    }
  }, [searchParams, hasAutoGenerated, aiSettings]);

  // Generate contextual welcome message based on AI settings
  const generateContextualWelcomeMessage = (userRequest?: string) => {
    let message = userRequest 
      ? `Hi! I'm your AI marketing assistant. I can see you want to work on: **"${userRequest}"**. Let me create that content for you right away!`
      : `Hi! I'm your AI marketing assistant. I'm here to help you create amazing content for your project. I can generate blog posts, social media content, marketing copy, images, and more!`;

    // Add context information based on active settings
    const contextParts = [];
    
    if (aiSettings.brandVoiceId) {
      // Mock brand voice data - in real app, fetch from API
      const brandVoiceName = aiSettings.brandVoiceId === '1' ? 'Professional & Friendly' : 'Casual & Creative';
      contextParts.push(`I'll use your **"${brandVoiceName}"** brand voice`);
    }
    
    if (aiSettings.audienceId) {
      // Mock audience data - in real app, fetch from API
      const audienceName = aiSettings.audienceId === '1' ? 'Marketing Professionals' : 'Small Business Owners';
      contextParts.push(`target your **"${audienceName}"** audience`);
    }
    
    if (aiSettings.knowledgeIds.length > 0) {
      contextParts.push(`reference your ${aiSettings.knowledgeIds.length} knowledge sources`);
    }

    if (contextParts.length > 0) {
      message += `\n\nüéØ **Active Context:** I'll ${contextParts.join(', ')}.`;
    } else {
      message += '\n\nSet up your brand voice and target audience in AI Context settings for more personalized content.';
    }

    // Add output format information
    if (aiSettings.outputFormat) {
      const formatDescriptions = {
        casual: 'casual and conversational',
        professional: 'professional and formal',
        creative: 'creative and playful'
      };
      message += `\n\nüìù **Output Style:** ${formatDescriptions[aiSettings.outputFormat]} tone`;
    }

    // Add creativity level
    if (aiSettings.temperature !== undefined) {
      const creativityLevel = aiSettings.temperature < 0.4 ? 'focused' : 
                             aiSettings.temperature > 0.7 ? 'creative' : 'balanced';
      message += ` with ${creativityLevel} creativity`;
    }

    message += `\n\n**What would you like to create today?**

üí° **Pro tip:** You can also highlight text in any content node and send it to me for rewriting!`;

    return message;
  };

  // Auto-generation function
  const handleAutoGeneration = async (userRequest: string) => {
    setIsTyping(true);
    
    // Add user message
    const userMessage: ChatMessage = {
      id: `user_${Date.now()}`,
      type: 'user',
      content: userRequest,
      timestamp: new Date()
    };
    
    setMessages(prev => [...prev, userMessage]);
    
    // Generate AI response based on the request
    try {
      const aiResponse = await generateAIResponse(userRequest);
      setMessages(prev => [...prev, aiResponse]);
      
      // Add content to canvas if generated
      if (aiResponse.generatedContent && (window as any).addCanvasItem) {
        (window as any).addCanvasItem(
          aiResponse.generatedContent.type,
          aiResponse.generatedContent.content,
          aiResponse.generatedContent.title
        );
      }
    } catch (error) {
      console.error('Error generating AI response:', error);
    } finally {
      setIsTyping(false);
    }
  };

  // Enhanced AI response generation that considers context settings
  const generateAIResponse = async (userMessage: string): Promise<ChatMessage> => {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));

    const messageId = `ai_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    // Determine response type based on user input
    const lowerMessage = userMessage.toLowerCase();
    
    // Check if this is a rewrite request
    if (lowerMessage.includes('rewrite') || lowerMessage.includes('please rewrite this text:')) {
      const textToRewrite = userMessage.replace(/please rewrite this text:\s*["']?/i, '').replace(/["']?$/, '');
      
      return {
        id: messageId,
        type: 'ai',
        content: generateContextualRewrite(textToRewrite),
        timestamp: new Date(),
        suggestions: [
          'Make it more casual',
          'Make it more professional', 
          'Make it shorter',
          'Add more detail'
        ]
      };
    }
    
    if (lowerMessage.includes('blog') || lowerMessage.includes('article') || lowerMessage.includes('post') || lowerMessage.includes('summer projects')) {
      return {
        id: messageId,
        type: 'ai',
        content: generateContextualBlogResponse(),
        timestamp: new Date(),
        generatedContent: {
          type: 'text',
          title: 'Creative Summer Project Ideas for an Unforgettable Season',
          content: generateContextualBlogContent()
        },
        suggestions: [
          'Create social media posts for this blog',
          'Generate email campaign about summer projects',
          'Design infographic about summer activities',
          'Write a follow-up article about indoor projects'
        ]
      };
    }
    
    // Default response for any other request
    return {
      id: messageId,
      type: 'ai',
      content: generateContextualDefaultResponse(userMessage),
      timestamp: new Date(),
      suggestions: [
        'Write a blog post',
        'Create social media content',
        'Generate email campaign',
        'Design marketing visuals'
      ]
    };
  };

  // Generate contextual rewrite based on AI settings
  const generateContextualRewrite = (originalText: string) => {
    let rewrittenText = originalText;
    
    // Apply tone based on output format
    if (aiSettings.outputFormat === 'casual') {
      rewrittenText = originalText.replace(/\b(utilize|implement|facilitate)\b/g, 'use')
                                 .replace(/\b(commence|initiate)\b/g, 'start')
                                 .replace(/\./g, '!')
                                 .replace(/\b(very)\b/g, 'super');
    } else if (aiSettings.outputFormat === 'professional') {
      rewrittenText = originalText.replace(/\b(use)\b/g, 'utilize')
                                 .replace(/\b(start)\b/g, 'commence')
                                 .replace(/!/g, '.');
    } else if (aiSettings.outputFormat === 'creative') {
      rewrittenText = originalText.replace(/\b(good)\b/g, 'amazing')
                                 .replace(/\b(nice)\b/g, 'fantastic')
                                 .replace(/\b(big)\b/g, 'massive');
    }

    return `I've rewritten the selected text using your **${aiSettings.outputFormat}** tone and **${aiSettings.temperature < 0.4 ? 'focused' : aiSettings.temperature > 0.7 ? 'creative' : 'balanced'}** creativity level!

**Original text:** "${originalText}"

**Rewritten version:** "${rewrittenText}"

${aiSettings.brandVoiceId ? 'This version aligns with your selected brand voice and ' : ''}maintains the original meaning while enhancing ${aiSettings.outputFormat === 'casual' ? 'approachability and friendliness' : aiSettings.outputFormat === 'professional' ? 'authority and credibility' : 'creativity and engagement'}.

Would you like me to try a different approach or style?`;
  };

  // Generate contextual blog response
  const generateContextualBlogResponse = () => {
    const brandVoiceNote = aiSettings.brandVoiceId ? 'using your selected brand voice and ' : '';
    const audienceNote = aiSettings.audienceId ? 'tailored for your target audience' : 'optimized for engagement';
    const knowledgeNote = aiSettings.knowledgeIds.length > 0 ? ` I've incorporated insights from your ${aiSettings.knowledgeIds.length} knowledge sources.` : '';
    
    return `Perfect! I've created a comprehensive blog post ${brandVoiceNote}${audienceNote}.${knowledgeNote}

**Key features of your blog post:**
- ${aiSettings.outputFormat === 'professional' ? 'Professional and authoritative' : aiSettings.outputFormat === 'casual' ? 'Conversational and approachable' : 'Creative and engaging'} tone
- SEO-optimized structure
- ${aiSettings.temperature > 0.7 ? 'Creative and unique' : aiSettings.temperature < 0.4 ? 'Focused and precise' : 'Balanced and practical'} insights
- Reader-friendly formatting

The content has been added to your canvas where you can further edit and customize it. You can double-click the content node to edit it directly, or highlight specific sections and send them back to me for rewriting!`;
  };

  // Generate contextual blog content
  const generateContextualBlogContent = () => {
    const baseContent = `# Creative Summer Project Ideas for an Unforgettable Season

Summer is a time for sunny skies, longer days, and plenty of opportunities to explore your creativity. Whether you're looking for a DIY crafts session with your kids, exciting outdoor activities, or ways to give back to your community, there's something for everyone.`;

    // Modify content based on output format
    if (aiSettings.outputFormat === 'casual') {
      return baseContent + `

Hey there! Ready to make this summer absolutely amazing? Let's dive into some super fun project ideas that'll keep you busy and happy all season long!

## DIY Crafts That'll Blow Your Mind

### 1. Painted Flower Pots
Grab some plain terracotta pots and let your creativity run wild! All you need is acrylic paint, brushes, and your imagination. These painted pots are perfect for growing awesome flowers or herbs.

### 2. Mason Jar Lanterns
Create magical outdoor lighting with mason jars and fairy lights! Add some twine or lace for that extra special touch. Perfect for those cozy backyard hangouts.

## Outdoor Adventures That Rock

### 3. Build the Ultimate Backyard Fort
Use blankets, chairs, and whatever you can find to create the coolest outdoor hideaway ever! Add pillows, books, and snacks for the perfect summer reading spot.

### 4. Start Your Own Container Garden
Even without a huge yard, you can grow amazing vegetables and herbs in containers. Tomatoes, basil, and lettuce are super easy for beginners!

Ready to start your summer project adventure? Pick one that speaks to you and let's make this season unforgettable! üåü`;
    } else if (aiSettings.outputFormat === 'professional') {
      return baseContent + `

This comprehensive guide presents carefully curated summer project ideas designed to maximize productivity and personal development during the warmer months.

## Strategic DIY Initiatives for Skill Development

### 1. Painted Flower Pot Workshop
Transform standard terracotta containers into sophisticated decorative elements utilizing acrylic paints and professional brushes. This project develops artistic capabilities while creating functional garden accessories.

### 2. Mason Jar Illumination Systems
Construct elegant outdoor lighting solutions by integrating battery-operated LED systems within mason jar containers. This project combines aesthetic enhancement with practical outdoor illumination.

## Structured Outdoor Development Programs

### 3. Architectural Fort Construction
Design and implement temporary outdoor structures utilizing available materials such as blankets, furniture, and support systems. This initiative develops spatial reasoning and project management skills.

### 4. Container-Based Agricultural Systems
Establish productive growing systems within confined spaces using container gardening methodologies. Focus on high-yield crops such as tomatoes, herbs, and leafy greens for optimal results.

These projects provide structured opportunities for skill development, creative expression, and productive summer engagement. Implementation of these initiatives will result in measurable personal growth and tangible outcomes.`;
    } else {
      return baseContent + `

Get ready to unleash your inner artist and transform this summer into an epic adventure playground! These projects aren't just activities ‚Äì they're gateways to discovering hidden talents and creating magical memories.

## Artistic Alchemy: DIY Crafts That Spark Joy

### 1. Painted Flower Pot Masterpieces
Turn ordinary terracotta into extraordinary art! Imagine swirling galaxies, blooming mandalas, or whimsical characters dancing across your pots. Each brushstroke tells a story, and every color choice reflects your unique vision.

### 2. Enchanted Mason Jar Lanterns
Create your own constellation of twinkling lights! These aren't just lanterns ‚Äì they're bottled starlight waiting to illuminate your evening adventures. Add mystical elements like colored glass or nature-inspired decorations.

## Epic Outdoor Quests

### 3. Fortress of Imagination
Build more than just a fort ‚Äì construct a portal to adventure! Whether it's a pirate ship sailing through your backyard seas or a space station orbiting Planet Garden, let your imagination be the architect.

### 4. Magical Growing Gardens
Transform containers into thriving ecosystems where tiny seeds become mighty plants! Watch as your green thumb awakens and your garden becomes a living testament to the magic of growth and patience.

Each project is a blank canvas waiting for your creative signature. Which adventure will you embark on first? The summer of extraordinary awaits! ‚ú®üé®üå±`;
    }
  };

  // Generate contextual default response
  const generateContextualDefaultResponse = (userMessage: string) => {
    const contextInfo = [];
    
    if (aiSettings.brandVoiceId) {
      contextInfo.push('your selected brand voice');
    }
    if (aiSettings.audienceId) {
      contextInfo.push('your target audience preferences');
    }
    if (aiSettings.knowledgeIds.length > 0) {
      contextInfo.push(`insights from your ${aiSettings.knowledgeIds.length} knowledge sources`);
    }

    const contextText = contextInfo.length > 0 
      ? ` I'll incorporate ${contextInfo.join(', ')} to ensure the content aligns perfectly with your brand and goals.`
      : '';

    return `I understand you'd like help with **"${userMessage}"**. I can assist you with creating various types of marketing content including:

‚Ä¢ **Blog posts and articles** - SEO-optimized, engaging content in ${aiSettings.outputFormat || 'professional'} tone
‚Ä¢ **Social media content** - Posts, captions, and hashtags  
‚Ä¢ **Email campaigns** - Subject lines, sequences, and newsletters
‚Ä¢ **Marketing copy** - Landing pages, ads, and sales materials
‚Ä¢ **Visual concepts** - Image ideas and design briefs
‚Ä¢ **Video scripts** - YouTube, TikTok, and promotional videos

${contextText}

**üí° Pro tip:** You can also highlight text in any content node on the canvas and send it to me for rewriting or improvement!

What specific type of content would you like me to create for your project?`;
  };

  // Handle sending message
  const handleSendMessage = async () => {
    if (!inputValue.trim()) return;

    const userMessage: ChatMessage = {
      id: `user_${Date.now()}`,
      type: 'user',
      content: inputValue,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsTyping(true);

    try {
      const aiResponse = await generateAIResponse(inputValue);
      setMessages(prev => [...prev, aiResponse]);
      
      // Add content to canvas if generated
      if (aiResponse.generatedContent && (window as any).addCanvasItem) {
        (window as any).addCanvasItem(
          aiResponse.generatedContent.type,
          aiResponse.generatedContent.content,
          aiResponse.generatedContent.title
        );
      }
    } catch (error) {
      console.error('Error generating AI response:', error);
    } finally {
      setIsTyping(false);
    }
  };

  // Handle suggestion click
  const handleSuggestionClick = (suggestion: string) => {
    setInputValue(suggestion);
    inputRef.current?.focus();
  };

  // Handle key press
  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  // Copy content to clipboard
  const copyToClipboard = (content: string) => {
    navigator.clipboard.writeText(content);
  };

  return (
    <div className={`bg-white border-l border-gray-200 flex flex-col transition-all duration-300 ${
      isExpanded ? 'w-[600px]' : 'w-96'
    }`}>
      {/* Chat Header */}
      <div className="p-6 border-b border-gray-200 bg-gradient-to-r from-indigo-50 to-purple-50">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="w-12 h-12 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-xl flex items-center justify-center shadow-lg">
              <Sparkles className="w-6 h-6 text-white" />
            </div>
            <div>
              <h3 className="text-lg font-semibold text-gray-900">AI Assistant</h3>
              <p className="text-sm text-gray-600">
                {aiSettings.brandVoiceId || aiSettings.audienceId || aiSettings.knowledgeIds.length > 0
                  ? 'Context-aware marketing co-pilot'
                  : 'Your marketing co-pilot'
                }
              </p>
            </div>
          </div>
          <div className="flex items-center gap-2">
            {/* Context Indicators */}
            {(aiSettings.brandVoiceId || aiSettings.audienceId || aiSettings.knowledgeIds.length > 0) && (
              <div className="flex items-center gap-1">
                {aiSettings.brandVoiceId && <div className="w-2 h-2 bg-blue-500 rounded-full" title="Brand Voice Active" />}
                {aiSettings.audienceId && <div className="w-2 h-2 bg-green-500 rounded-full" title="Audience Active" />}
                {aiSettings.knowledgeIds.length > 0 && <div className="w-2 h-2 bg-purple-500 rounded-full" title="Knowledge Base Active" />}
              </div>
            )}
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setIsExpanded(!isExpanded)}
              className="p-2"
            >
              {isExpanded ? <Minimize2 size={16} /> : <Maximize2 size={16} />}
            </Button>
          </div>
        </div>
      </div>

      {/* Messages */}
      <div className="flex-1 overflow-y-auto p-6 space-y-6 custom-scrollbar">
        {messages.map((message) => (
          <div key={message.id} className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>
            <div className={`max-w-[85%] ${message.type === 'user' ? 'order-2' : 'order-1'}`}>
              {/* Avatar */}
              <div className={`flex items-center gap-3 mb-3 ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>
                <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                  message.type === 'user' 
                    ? 'bg-gray-200 order-2' 
                    : 'bg-gradient-to-br from-indigo-500 to-purple-600 order-1'
                }`}>
                  {message.type === 'user' ? (
                    <User size={16} className="text-gray-600" />
                  ) : (
                    <Bot size={16} className="text-white" />
                  )}
                </div>
                <span className="text-xs text-gray-500 font-medium">
                  {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                </span>
              </div>

              {/* Message Content */}
              <div className={`rounded-2xl p-4 ${
                message.type === 'user'
                  ? 'bg-indigo-600 text-white'
                  : 'bg-gray-100 text-gray-900'
              }`}>
                <div className="text-sm leading-relaxed">
                  {message.type === 'ai' ? (
                    <ReactMarkdown className="prose prose-sm max-w-none">
                      {message.content}
                    </ReactMarkdown>
                  ) : (
                    <div className="whitespace-pre-wrap">{message.content}</div>
                  )}
                </div>

                {/* Generated Content */}
                {message.generatedContent && (
                  <div className="mt-4 p-4 bg-white rounded-xl border border-gray-200 shadow-sm">
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center gap-2">
                        {message.generatedContent.type === 'text' && <FileText size={16} className="text-blue-600" />}
                        {message.generatedContent.type === 'image' && <Image size={16} className="text-green-600" />}
                        {message.generatedContent.type === 'chart' && <BarChart3 size={16} className="text-purple-600" />}
                        {message.generatedContent.type === 'video' && <Video size={16} className="text-orange-600" />}
                        <span className="text-sm font-semibold text-gray-900">
                          {message.generatedContent.title}
                        </span>
                      </div>
                      <button
                        onClick={() => copyToClipboard(message.generatedContent!.content)}
                        className="p-1.5 text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-100 transition-colors"
                        title="Copy to clipboard"
                      >
                        <Copy size={14} />
                      </button>
                    </div>
                    <div className="text-xs text-gray-600 bg-gray-50 p-3 rounded-lg max-h-32 overflow-y-auto">
                      {message.generatedContent.content.length > 200 
                        ? `${message.generatedContent.content.substring(0, 200)}...`
                        : message.generatedContent.content
                      }
                    </div>
                    <div className="flex items-center gap-3 mt-3">
                      <div className="flex items-center gap-1 text-xs text-green-600 bg-green-50 px-2 py-1 rounded-full">
                        <span>‚úì</span>
                        <span>Added to Canvas</span>
                      </div>
                      <button className="p-1 text-gray-400 hover:text-green-600 transition-colors">
                        <ThumbsUp size={12} />
                      </button>
                      <button className="p-1 text-gray-400 hover:text-red-600 transition-colors">
                        <ThumbsDown size={12} />
                      </button>
                    </div>
                  </div>
                )}

                {/* Suggestions */}
                {message.suggestions && (
                  <div className="mt-4 space-y-2">
                    {message.suggestions.map((suggestion, index) => (
                      <button
                        key={index}
                        onClick={() => handleSuggestionClick(suggestion)}
                        className="block w-full text-left p-3 text-xs bg-white/10 hover:bg-white/20 rounded-xl border border-white/20 transition-colors"
                      >
                        <div className="flex items-center gap-2">
                          <Lightbulb size={12} className="text-yellow-400" />
                          <span>{suggestion}</span>
                        </div>
                      </button>
                    ))}
                  </div>
                )}
              </div>
            </div>
          </div>
        ))}

        {/* Typing Indicator */}
        {isTyping && (
          <div className="flex justify-start">
            <div className="flex items-center gap-3">
              <div className="w-8 h-8 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-full flex items-center justify-center">
                <Bot size={16} className="text-white" />
              </div>
              <div className="bg-gray-100 rounded-2xl p-4">
                <div className="flex space-x-1">
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                </div>
              </div>
            </div>
          </div>
        )}

        <div ref={messagesEndRef} />
      </div>

      {/* Input Area */}
      <div className="p-6 border-t border-gray-200 bg-gray-50">
        <div className="flex gap-3">
          <input
            ref={inputRef}
            type="text"
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder="Ask me to create marketing content..."
            className="flex-1 px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent text-sm bg-white"
            disabled={isTyping}
          />
          <Button
            onClick={handleSendMessage}
            disabled={!inputValue.trim() || isTyping}
            size="sm"
            className="px-4 py-3 bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 rounded-xl"
          >
            <Send size={16} />
          </Button>
        </div>
        <div className="flex items-center justify-between mt-3">
          <p className="text-xs text-gray-500">
            AI can make mistakes. Verify important information.
          </p>
          {/* Context Status */}
          {(aiSettings.brandVoiceId || aiSettings.audienceId || aiSettings.knowledgeIds.length > 0) && (
            <div className="flex items-center gap-1 text-xs text-indigo-600">
              <Sparkles size={12} />
              <span>Context Active</span>
            </div>
          )}
        </div>
      </div>
    </div>
  );
});

AIChatbot.displayName = 'AIChatbot';