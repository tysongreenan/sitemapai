import React, { useState, useRef, useEffect, forwardRef, useImperativeHandle } from 'react';
import { useSearchParams } from 'react-router-dom';
import { Send, Sparkles, User, Bot, Lightbulb, FileText, Image, BarChart3, Video, Copy, ThumbsUp, ThumbsDown, Maximize2, Minimize2 } from 'lucide-react';
import { Button } from '../ui/Button';
import ReactMarkdown from 'react-markdown';
import { AIContextSettings } from './AIContextSettings';

interface ChatMessage {
  id: string;
  type: 'user' | 'ai';
  content: string;
  timestamp: Date;
  suggestions?: string[];
  generatedContent?: {
    type: 'text' | 'image' | 'chart' | 'video';
    title: string;
    content: string;
  };
}

interface AIChatbotProps {
  projectId: string;
  aiSettings: AIContextSettings;
}

export interface AIChatbotRef {
  setInputValueFromOutside: (text: string) => void;
}

export const AIChatbot = forwardRef<AIChatbotRef, AIChatbotProps>(({ projectId, aiSettings }, ref) => {
  const [searchParams] = useSearchParams();
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [hasAutoGenerated, setHasAutoGenerated] = useState(false);
  const [isExpanded, setIsExpanded] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  // Expose methods to parent component
  useImperativeHandle(ref, () => ({
    setInputValueFromOutside: (text: string) => {
      setInputValue(text);
      inputRef.current?.focus();
    }
  }));

  // Auto-scroll to bottom
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Focus input on mount
  useEffect(() => {
    inputRef.current?.focus();
  }, []);

  // Check for auto-generation parameter and trigger content creation
  useEffect(() => {
    const autoGenerate = searchParams.get('autoGenerate');
    
    if (autoGenerate && !hasAutoGenerated) {
      setHasAutoGenerated(true);
      
      // Add welcome message with AI context information
      const welcomeMessage: ChatMessage = {
        id: 'welcome',
        type: 'ai',
        content: generateContextualWelcomeMessage(autoGenerate),
        timestamp: new Date(),
        suggestions: [
          'Create additional content variations',
          'Generate social media posts for this',
          'Write email campaign about this topic',
          'Create supporting images'
        ]
      };
      
      setMessages([welcomeMessage]);
      
      // Automatically generate content based on the user's request
      setTimeout(() => {
        handleAutoGeneration(autoGenerate);
      }, 1000);
    } else if (!hasAutoGenerated) {
      // Default welcome message if no auto-generation
      const defaultWelcome: ChatMessage = {
        id: 'welcome',
        type: 'ai',
        content: generateContextualWelcomeMessage(),
        timestamp: new Date(),
        suggestions: [
          'Write a blog post about our product',
          'Create social media content',
          'Generate email marketing copy',
          'Design a marketing campaign'
        ]
      };
      
      setMessages([defaultWelcome]);
      setHasAutoGenerated(true);
    }
  }, [searchParams, hasAutoGenerated, aiSettings]);

  // Extract topic from user message
  const extractTopicFromMessage = (message: string): string => {
    const lowerMessage = message.toLowerCase();
    
    // Look for patterns like "blog post about X", "write about X", "article on X"
    const patterns = [
      /(?:blog post|article|post|write)\s+(?:about|on|regarding)\s+(.+)/i,
      /(?:create|generate|make)\s+(?:a|an)?\s*(?:blog post|article|post)\s+(?:about|on|regarding)\s+(.+)/i,
      /(?:blog|article|post)\s+(?:about|on|regarding)\s+(.+)/i
    ];
    
    for (const pattern of patterns) {
      const match = message.match(pattern);
      if (match && match[1]) {
        return match[1].trim();
      }
    }
    
    // If no specific pattern found, try to extract topic after common keywords
    const keywordPatterns = [
      /(?:about|on|regarding)\s+(.+)/i,
      /(?:topic|subject):\s*(.+)/i
    ];
    
    for (const pattern of keywordPatterns) {
      const match = message.match(pattern);
      if (match && match[1]) {
        return match[1].trim();
      }
    }
    
    // Default fallback
    return 'marketing strategies';
  };

  // Generate contextual welcome message based on AI settings
  const generateContextualWelcomeMessage = (userRequest?: string) => {
    let message = userRequest 
      ? `Hi! I'm your AI marketing assistant. I can see you want to work on: **"${userRequest}"**. Let me create that content for you right away!`
      : `Hi! I'm your AI marketing assistant. I'm here to help you create amazing content for your project. I can generate blog posts, social media content, marketing copy, images, and more!`;

    // Add context information based on active settings
    const contextParts = [];
    
    if (aiSettings.brandVoiceId) {
      // Mock brand voice data - in real app, fetch from API
      const brandVoiceName = aiSettings.brandVoiceId === '1' ? 'Professional & Friendly' : 'Casual & Creative';
      contextParts.push(`I'll use your **"${brandVoiceName}"** brand voice`);
    }
    
    if (aiSettings.audienceId) {
      // Mock audience data - in real app, fetch from API
      const audienceName = aiSettings.audienceId === '1' ? 'Marketing Professionals' : 'Small Business Owners';
      contextParts.push(`target your **"${audienceName}"** audience`);
    }
    
    if (aiSettings.knowledgeIds.length > 0) {
      contextParts.push(`reference your ${aiSettings.knowledgeIds.length} knowledge sources`);
    }

    if (contextParts.length > 0) {
      message += `\n\nüéØ **Active Context:** I'll ${contextParts.join(', ')}.`;
    } else {
      message += '\n\nSet up your brand voice and target audience in AI Context settings for more personalized content.';
    }

    // Add output format information
    if (aiSettings.outputFormat) {
      const formatDescriptions = {
        casual: 'casual and conversational',
        professional: 'professional and formal',
        creative: 'creative and playful'
      };
      message += `\n\nüìù **Output Style:** ${formatDescriptions[aiSettings.outputFormat]} tone`;
    }

    // Add creativity level
    if (aiSettings.temperature !== undefined) {
      const creativityLevel = aiSettings.temperature < 0.4 ? 'focused' : 
                             aiSettings.temperature > 0.7 ? 'creative' : 'balanced';
      message += ` with ${creativityLevel} creativity`;
    }

    message += `\n\n**What would you like to create today?**

üí° **Pro tip:** You can also highlight text in any content node and send it to me for rewriting!`;

    return message;
  };

  // Auto-generation function
  const handleAutoGeneration = async (userRequest: string) => {
    setIsTyping(true);
    
    // Add user message
    const userMessage: ChatMessage = {
      id: `user_${Date.now()}`,
      type: 'user',
      content: userRequest,
      timestamp: new Date()
    };
    
    setMessages(prev => [...prev, userMessage]);
    
    // Generate AI response based on the request
    try {
      const aiResponse = await generateAIResponse(userRequest);
      setMessages(prev => [...prev, aiResponse]);
      
      // Add content to canvas if generated
      if (aiResponse.generatedContent && (window as any).addCanvasItem) {
        (window as any).addCanvasItem(
          aiResponse.generatedContent.type,
          aiResponse.generatedContent.content,
          aiResponse.generatedContent.title
        );
      }
    } catch (error) {
      console.error('Error generating AI response:', error);
    } finally {
      setIsTyping(false);
    }
  };

  // Enhanced AI response generation that considers context settings
  const generateAIResponse = async (userMessage: string): Promise<ChatMessage> => {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));

    const messageId = `ai_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    // Determine response type based on user input
    const lowerMessage = userMessage.toLowerCase();
    
    // Check if this is a rewrite request
    if (lowerMessage.includes('rewrite') || lowerMessage.includes('please rewrite this text:')) {
      const textToRewrite = userMessage.replace(/please rewrite this text:\s*["']?/i, '').replace(/["']?$/, '');
      
      return {
        id: messageId,
        type: 'ai',
        content: generateContextualRewrite(textToRewrite),
        timestamp: new Date(),
        suggestions: [
          'Make it more casual',
          'Make it more professional', 
          'Make it shorter',
          'Add more detail'
        ]
      };
    }
    
    // Check for blog post requests and extract topic
    if (lowerMessage.includes('blog') || lowerMessage.includes('article') || lowerMessage.includes('post')) {
      const topic = extractTopicFromMessage(userMessage);
      
      return {
        id: messageId,
        type: 'ai',
        content: generateContextualBlogResponse(topic),
        timestamp: new Date(),
        generatedContent: {
          type: 'text',
          title: generateBlogTitle(topic),
          content: generateContextualBlogContent(topic)
        },
        suggestions: [
          'Create social media posts for this blog',
          `Generate email campaign about ${topic}`,
          `Design infographic about ${topic}`,
          'Write a follow-up article'
        ]
      };
    }
    
    // Default response for any other request
    return {
      id: messageId,
      type: 'ai',
      content: generateContextualDefaultResponse(userMessage),
      timestamp: new Date(),
      suggestions: [
        'Write a blog post',
        'Create social media content',
        'Generate email campaign',
        'Design marketing visuals'
      ]
    };
  };

  // Generate blog title based on topic
  const generateBlogTitle = (topic: string): string => {
    const titleTemplates = [
      `The Ultimate Guide to ${topic}`,
      `Everything You Need to Know About ${topic}`,
      `${topic}: A Comprehensive Guide`,
      `Mastering ${topic}: Tips and Strategies`,
      `The Complete ${topic} Handbook`,
      `${topic} Made Simple: A Step-by-Step Guide`
    ];
    
    // Capitalize first letter of topic
    const capitalizedTopic = topic.charAt(0).toUpperCase() + topic.slice(1);
    
    // Select a random template and replace topic
    const randomTemplate = titleTemplates[Math.floor(Math.random() * titleTemplates.length)];
    return randomTemplate.replace(topic, capitalizedTopic);
  };

  // Generate contextual rewrite based on AI settings
  const generateContextualRewrite = (originalText: string) => {
    let rewrittenText = originalText;
    
    // Apply tone based on output format
    if (aiSettings.outputFormat === 'casual') {
      rewrittenText = originalText.replace(/\b(utilize|implement|facilitate)\b/g, 'use')
                                 .replace(/\b(commence|initiate)\b/g, 'start')
                                 .replace(/\./g, '!')
                                 .replace(/\b(very)\b/g, 'super');
    } else if (aiSettings.outputFormat === 'professional') {
      rewrittenText = originalText.replace(/\b(use)\b/g, 'utilize')
                                 .replace(/\b(start)\b/g, 'commence')
                                 .replace(/!/g, '.');
    } else if (aiSettings.outputFormat === 'creative') {
      rewrittenText = originalText.replace(/\b(good)\b/g, 'amazing')
                                 .replace(/\b(nice)\b/g, 'fantastic')
                                 .replace(/\b(big)\b/g, 'massive');
    }

    return `I've rewritten the selected text using your **${aiSettings.outputFormat}** tone and **${aiSettings.temperature < 0.4 ? 'focused' : aiSettings.temperature > 0.7 ? 'creative' : 'balanced'}** creativity level!

**Original text:** "${originalText}"

**Rewritten version:** "${rewrittenText}"

${aiSettings.brandVoiceId ? 'This version aligns with your selected brand voice and ' : ''}maintains the original meaning while enhancing ${aiSettings.outputFormat === 'casual' ? 'approachability and friendliness' : aiSettings.outputFormat === 'professional' ? 'authority and credibility' : 'creativity and engagement'}.

Would you like me to try a different approach or style?`;
  };

  // Generate contextual blog response
  const generateContextualBlogResponse = (topic: string) => {
    const brandVoiceNote = aiSettings.brandVoiceId ? 'using your selected brand voice and ' : '';
    const audienceNote = aiSettings.audienceId ? 'tailored for your target audience' : 'optimized for engagement';
    const knowledgeNote = aiSettings.knowledgeIds.length > 0 ? ` I've incorporated insights from your ${aiSettings.knowledgeIds.length} knowledge sources.` : '';
    
    return `Perfect! I've created a comprehensive blog post about **${topic}** ${brandVoiceNote}${audienceNote}.${knowledgeNote}

**Key features of your blog post:**
- ${aiSettings.outputFormat === 'professional' ? 'Professional and authoritative' : aiSettings.outputFormat === 'casual' ? 'Conversational and approachable' : 'Creative and engaging'} tone
- SEO-optimized structure focused on "${topic}"
- ${aiSettings.temperature > 0.7 ? 'Creative and unique' : aiSettings.temperature < 0.4 ? 'Focused and precise' : 'Balanced and practical'} insights
- Reader-friendly formatting

The content has been added to your canvas where you can further edit and customize it. You can double-click the content node to edit it directly, or highlight specific sections and send them back to me for rewriting!`;
  };

  // Generate contextual blog content based on topic
  const generateContextualBlogContent = (topic: string) => {
    const title = generateBlogTitle(topic);
    const capitalizedTopic = topic.charAt(0).toUpperCase() + topic.slice(1);
    
    let baseContent = `# ${title}

${capitalizedTopic} has become increasingly important in today's rapidly evolving landscape. Whether you're a beginner looking to understand the fundamentals or an expert seeking advanced strategies, this comprehensive guide will provide you with valuable insights and actionable advice.

## Understanding ${capitalizedTopic}

${capitalizedTopic} encompasses various aspects that are crucial for success. Let's explore the key components that make up this important topic.

### Why ${capitalizedTopic} Matters

In today's competitive environment, understanding ${topic} is essential for:
- Achieving better results
- Staying ahead of the competition
- Making informed decisions
- Maximizing efficiency and effectiveness

## Key Strategies for ${capitalizedTopic}

### 1. Foundation Building
Start with a solid understanding of the fundamentals. This includes:
- Learning the basic principles
- Understanding common terminology
- Identifying key stakeholders
- Setting clear objectives

### 2. Implementation Best Practices
When implementing ${topic} strategies:
- Start with small, manageable steps
- Monitor progress regularly
- Adjust your approach based on results
- Seek feedback from experts and peers

### 3. Advanced Techniques
Once you've mastered the basics, consider these advanced approaches:
- Leveraging technology and automation
- Implementing data-driven decision making
- Building strategic partnerships
- Continuous improvement processes

## Common Challenges and Solutions

### Challenge 1: Getting Started
Many people struggle with where to begin. The solution is to:
- Break down the topic into smaller, manageable pieces
- Set realistic goals and timelines
- Seek guidance from experienced professionals
- Start with proven methods before experimenting

### Challenge 2: Staying Current
${capitalizedTopic} is constantly evolving. To stay current:
- Follow industry leaders and publications
- Attend conferences and workshops
- Join professional communities
- Regularly review and update your strategies

## Measuring Success

To ensure your ${topic} efforts are effective, track these key metrics:
- Performance indicators relevant to your goals
- Return on investment (ROI)
- User satisfaction and feedback
- Long-term sustainability

## Future Trends in ${capitalizedTopic}

Looking ahead, several trends are shaping the future of ${topic}:
- Increased automation and AI integration
- Greater focus on personalization
- Enhanced data analytics capabilities
- Improved user experience design

## Conclusion

${capitalizedTopic} is a multifaceted topic that requires careful planning, consistent execution, and continuous learning. By following the strategies outlined in this guide, you'll be well-equipped to achieve success in your ${topic} endeavors.

Remember that mastery takes time, so be patient with yourself as you develop your skills. Stay curious, keep learning, and don't hesitate to seek help when needed.

---

*Ready to take your ${topic} to the next level? Start implementing these strategies today and watch your results improve!*`;

    // Modify content based on output format
    if (aiSettings.outputFormat === 'casual') {
      baseContent = baseContent
        .replace(/encompasses various aspects/g, 'covers lots of different things')
        .replace(/crucial for success/g, 'super important for winning')
        .replace(/fundamental principles/g, 'basic stuff you need to know')
        .replace(/implementing/g, 'putting into action')
        .replace(/leveraging/g, 'using')
        .replace(/multifaceted topic/g, 'topic with many sides');
    } else if (aiSettings.outputFormat === 'creative') {
      baseContent = baseContent
        .replace(/has become increasingly important/g, 'has emerged as a game-changing force')
        .replace(/comprehensive guide/g, 'ultimate roadmap to success')
        .replace(/valuable insights/g, 'golden nuggets of wisdom')
        .replace(/actionable advice/g, 'power-packed strategies')
        .replace(/competitive environment/g, 'battlefield of innovation');
    }

    return baseContent;
  };

  // Generate contextual default response
  const generateContextualDefaultResponse = (userMessage: string) => {
    const contextInfo = [];
    
    if (aiSettings.brandVoiceId) {
      contextInfo.push('your selected brand voice');
    }
    if (aiSettings.audienceId) {
      contextInfo.push('your target audience preferences');
    }
    if (aiSettings.knowledgeIds.length > 0) {
      contextInfo.push(`insights from your ${aiSettings.knowledgeIds.length} knowledge sources`);
    }

    const contextText = contextInfo.length > 0 
      ? ` I'll incorporate ${contextInfo.join(', ')} to ensure the content aligns perfectly with your brand and goals.`
      : '';

    return `I understand you'd like help with **"${userMessage}"**. I can assist you with creating various types of marketing content including:

‚Ä¢ **Blog posts and articles** - SEO-optimized, engaging content in ${aiSettings.outputFormat || 'professional'} tone
‚Ä¢ **Social media content** - Posts, captions, and hashtags  
‚Ä¢ **Email campaigns** - Subject lines, sequences, and newsletters
‚Ä¢ **Marketing copy** - Landing pages, ads, and sales materials
‚Ä¢ **Visual concepts** - Image ideas and design briefs
‚Ä¢ **Video scripts** - YouTube, TikTok, and promotional videos

${contextText}

**üí° Pro tip:** You can also highlight text in any content node on the canvas and send it to me for rewriting or improvement!

What specific type of content would you like me to create for your project?`;
  };

  // Handle sending message
  const handleSendMessage = async () => {
    if (!inputValue.trim()) return;

    const userMessage: ChatMessage = {
      id: `user_${Date.now()}`,
      type: 'user',
      content: inputValue,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsTyping(true);

    try {
      const aiResponse = await generateAIResponse(inputValue);
      setMessages(prev => [...prev, aiResponse]);
      
      // Add content to canvas if generated
      if (aiResponse.generatedContent && (window as any).addCanvasItem) {
        (window as any).addCanvasItem(
          aiResponse.generatedContent.type,
          aiResponse.generatedContent.content,
          aiResponse.generatedContent.title
        );
      }
    } catch (error) {
      console.error('Error generating AI response:', error);
    } finally {
      setIsTyping(false);
    }
  };

  // Handle suggestion click
  const handleSuggestionClick = (suggestion: string) => {
    setInputValue(suggestion);
    inputRef.current?.focus();
  };

  // Handle key press
  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  // Copy content to clipboard
  const copyToClipboard = (content: string) => {
    navigator.clipboard.writeText(content);
  };

  return (
    <div className={`bg-white border-l border-gray-200 flex flex-col transition-all duration-300 ${
      isExpanded ? 'w-[600px]' : 'w-96'
    }`}>
      {/* Chat Header */}
      <div className="p-6 border-b border-gray-200 bg-gradient-to-r from-indigo-50 to-purple-50">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="w-12 h-12 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-xl flex items-center justify-center shadow-lg">
              <Sparkles className="w-6 h-6 text-white" />
            </div>
            <div>
              <h3 className="text-lg font-semibold text-gray-900">AI Assistant</h3>
              <p className="text-sm text-gray-600">
                {aiSettings.brandVoiceId || aiSettings.audienceId || aiSettings.knowledgeIds.length > 0
                  ? 'Context-aware marketing co-pilot'
                  : 'Your marketing co-pilot'
                }
              </p>
            </div>
          </div>
          <div className="flex items-center gap-2">
            {/* Context Indicators */}
            {(aiSettings.brandVoiceId || aiSettings.audienceId || aiSettings.knowledgeIds.length > 0) && (
              <div className="flex items-center gap-1">
                {aiSettings.brandVoiceId && <div className="w-2 h-2 bg-blue-500 rounded-full" title="Brand Voice Active" />}
                {aiSettings.audienceId && <div className="w-2 h-2 bg-green-500 rounded-full" title="Audience Active" />}
                {aiSettings.knowledgeIds.length > 0 && <div className="w-2 h-2 bg-purple-500 rounded-full" title="Knowledge Base Active" />}
              </div>
            )}
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setIsExpanded(!isExpanded)}
              className="p-2"
            >
              {isExpanded ? <Minimize2 size={16} /> : <Maximize2 size={16} />}
            </Button>
          </div>
        </div>
      </div>

      {/* Messages */}
      <div className="flex-1 overflow-y-auto p-6 space-y-6 custom-scrollbar">
        {messages.map((message) => (
          <div key={message.id} className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>
            <div className={`max-w-[85%] ${message.type === 'user' ? 'order-2' : 'order-1'}`}>
              {/* Avatar */}
              <div className={`flex items-center gap-3 mb-3 ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>
                <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                  message.type === 'user' 
                    ? 'bg-gray-200 order-2' 
                    : 'bg-gradient-to-br from-indigo-500 to-purple-600 order-1'
                }`}>
                  {message.type === 'user' ? (
                    <User size={16} className="text-gray-600" />
                  ) : (
                    <Bot size={16} className="text-white" />
                  )}
                </div>
                <span className="text-xs text-gray-500 font-medium">
                  {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                </span>
              </div>

              {/* Message Content */}
              <div className={`rounded-2xl p-4 ${
                message.type === 'user'
                  ? 'bg-indigo-600 text-white'
                  : 'bg-gray-100 text-gray-900'
              }`}>
                <div className="text-sm leading-relaxed">
                  {message.type === 'ai' ? (
                    <ReactMarkdown className="prose prose-sm max-w-none">
                      {message.content}
                    </ReactMarkdown>
                  ) : (
                    <div className="whitespace-pre-wrap">{message.content}</div>
                  )}
                </div>

                {/* Generated Content */}
                {message.generatedContent && (
                  <div className="mt-4 p-4 bg-white rounded-xl border border-gray-200 shadow-sm">
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center gap-2">
                        {message.generatedContent.type === 'text' && <FileText size={16} className="text-blue-600" />}
                        {message.generatedContent.type === 'image' && <Image size={16} className="text-green-600" />}
                        {message.generatedContent.type === 'chart' && <BarChart3 size={16} className="text-purple-600" />}
                        {message.generatedContent.type === 'video' && <Video size={16} className="text-orange-600" />}
                        <span className="text-sm font-semibold text-gray-900">
                          {message.generatedContent.title}
                        </span>
                      </div>
                      <button
                        onClick={() => copyToClipboard(message.generatedContent!.content)}
                        className="p-1.5 text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-100 transition-colors"
                        title="Copy to clipboard"
                      >
                        <Copy size={14} />
                      </button>
                    </div>
                    <div className="text-xs text-gray-600 bg-gray-50 p-3 rounded-lg max-h-32 overflow-y-auto">
                      {message.generatedContent.content.length > 200 
                        ? `${message.generatedContent.content.substring(0, 200)}...`
                        : message.generatedContent.content
                      }
                    </div>
                    <div className="flex items-center gap-3 mt-3">
                      <div className="flex items-center gap-1 text-xs text-green-600 bg-green-50 px-2 py-1 rounded-full">
                        <span>‚úì</span>
                        <span>Added to Canvas</span>
                      </div>
                      <button className="p-1 text-gray-400 hover:text-green-600 transition-colors">
                        <ThumbsUp size={12} />
                      </button>
                      <button className="p-1 text-gray-400 hover:text-red-600 transition-colors">
                        <ThumbsDown size={12} />
                      </button>
                    </div>
                  </div>
                )}

                {/* Suggestions */}
                {message.suggestions && (
                  <div className="mt-4 space-y-2">
                    {message.suggestions.map((suggestion, index) => (
                      <button
                        key={index}
                        onClick={() => handleSuggestionClick(suggestion)}
                        className="block w-full text-left p-3 text-xs bg-white/10 hover:bg-white/20 rounded-xl border border-white/20 transition-colors"
                      >
                        <div className="flex items-center gap-2">
                          <Lightbulb size={12} className="text-yellow-400" />
                          <span>{suggestion}</span>
                        </div>
                      </button>
                    ))}
                  </div>
                )}
              </div>
            </div>
          </div>
        ))}

        {/* Typing Indicator */}
        {isTyping && (
          <div className="flex justify-start">
            <div className="flex items-center gap-3">
              <div className="w-8 h-8 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-full flex items-center justify-center">
                <Bot size={16} className="text-white" />
              </div>
              <div className="bg-gray-100 rounded-2xl p-4">
                <div className="flex space-x-1">
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                </div>
              </div>
            </div>
          </div>
        )}

        <div ref={messagesEndRef} />
      </div>

      {/* Input Area */}
      <div className="p-6 border-t border-gray-200 bg-gray-50">
        <div className="flex gap-3">
          <input
            ref={inputRef}
            type="text"
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder="Ask me to create marketing content..."
            className="flex-1 px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent text-sm bg-white"
            disabled={isTyping}
          />
          <Button
            onClick={handleSendMessage}
            disabled={!inputValue.trim() || isTyping}
            size="sm"
            className="px-4 py-3 bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 rounded-xl"
          >
            <Send size={16} />
          </Button>
        </div>
        <div className="flex items-center justify-between mt-3">
          <p className="text-xs text-gray-500">
            AI can make mistakes. Verify important information.
          </p>
          {/* Context Status */}
          {(aiSettings.brandVoiceId || aiSettings.audienceId || aiSettings.knowledgeIds.length > 0) && (
            <div className="flex items-center gap-1 text-xs text-indigo-600">
              <Sparkles size={12} />
              <span>Context Active</span>
            </div>
          )}
        </div>
      </div>
    </div>
  );
});

AIChatbot.displayName = 'AIChatbot';